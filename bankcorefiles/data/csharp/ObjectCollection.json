[
"{ValueSet(Item:{ComponentName})}",
"{ValueSet(LItem:{Lower({ComponentName})}",
"using System;",
"using System.Collections.Generic;",
"using System.Collections.ObjectModel;",
"using System.ComponentModel;",
"using System.Data.Entity;",
"using System.Linq;",
"using System.Reflection;",
"using System.Runtime.Serialization;",
"using System.Text;",
"using System.Threading.Tasks;",
"",
"namespace BankViewModel",
"{",
"{IncIndent}",
	"//*-------------------------------------------------------------------------*",
	"//* {Item}Collection {SpaceTo(75)}*",
	"//*-------------------------------------------------------------------------*",
	"/// <summary>",
	"/// Collection of {Item}Item items.",
	"/// </summary>",
	"public class {Item}Collection : ObservableCollection<{Item}Item>",
	"{",
	"{IncIndent}",
		"{Include(PrivateSection.json)}",
		"{Include(ProtectedSection.json)}",
		"{Include(PublicSection.json)}",
		"//*-----------------------------------------------------------------------*",
		"//* _Constructor {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// Create a new Instance of the {Item}Collection item.",
		"/// </summary>",
		"public {Item}Collection()",
		"{",
		"}",
		"//*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*",
		"/// <summary>",
		"/// Create a new Instance of the {Item}Collection Item.",
		"/// </summary>",
		"public {Item}Collection(bankEntities context)",
		"{",
		"{IncIndent}",
			"mContext = context;",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Add {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// Add a new {Item}Item to the collection.",
		"/// </summary>",
		"public new void Add({Item}Item {LItem}",
		"{",
		"{IncIndent}",
			"bnk{Item} ci = null;",
			"if({LItem} != null)",
			"{",
			"{IncIndent}",
				"base.Add({LItem});",
				"if({LItem}.EntityItem == null && mContext != null)",
				"{",
				"{IncIndent}",
					"{LItem}.HasPresetValues = true;",
					"ci = new bnk{Item}();",
					"mContext.bnk{Items}.Add(ci);",
					"{LItem}.EntityItem = ci;",
					"{DecIndent}",
				"}",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* AddOrUpdate {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// Add a new {Item}Item to the collection, or update the existing one.",
		"/// </summary>",
		"public {Item}Item AddOrUpdate({Item}Item {LItem})",
		"{",
		"{IncIndent}",
			"bnk{Item} ci = null;\t\t\t// Internal Item.",
			"{Item}Item cx = null;\t\t\t// Existing Item.",
			"if({LItem} != null)",
			"{",
			"{IncIndent}",
				"cx = this.FirstOrDefault(r => r.{Item}ID == {LItem}.{Item}ID);",
				"if(cx == null)",
				"{",
				"{IncIndent}",
					"// Create new item.",
					"base.Add({LItem});",
					"if({LItem}.EntityItem == null && mContext != null)",
					"{",
					"{IncIndent}",
						"{LItem}.HasPresetValues = true;",
						"ci = new bnk{Item}();",
						"mContext.bnk{Items}.Add(ci);",
						"{LItem}.EntityItem = ci;",
						"{DecIndent}",
					"}",
					"cx = {LItem};",
					"{DecIndent}",
				"}",
				"else",
				"{",
				"{IncIndent}",
					"// Item already existed.",
					"{LItem}.TransferProperties(cx);",
					"{DecIndent}",
				"}",
				"{DecIndent}",
			"}",
			"return cx;",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Context {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"private bankEntities mContext = null;",
		"/// <summary>",
		"/// Get/Set a reference to the current data model content.",
		"/// </summary>",
		"public bankEntities Context",
		"{",
		"{IncIndent}",
			"get",
			"{",
			"{IncIndent}",
				"if(mContext == null)",
				"{",
				"{IncIndent}",
					"mContext = new bankEntities();",
					"{DecIndent}",
				"}",
				"return mContext;",
				"{DecIndent}",
			"}",
			"set { mContext = value; }",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* ElementType {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"private Type mElementType = typeof({Item}Item);",
		"/// <summary>",
		"/// Get the type of element returned when the expression tree associated",
		"/// with this instance is executed.",
		"/// </summary>",
		"public Type ElementType",
		"{",
		"{IncIndent}",
			"get { return mElementType; }",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Exists {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// Return a value indicating whether the specified {LItem} exists in",
		"/// this collection.",
		"/// </summary>",
		"public bool Exists(int {LItem}ID)",
		"{",
		"{IncIndent}",
			"bool rv = (this.First(r => r.{Item}ID == {LItem}ID) != null);",
			"return rv;",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Expression {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"private System.Linq.Expressions.Expression mExpression =",
		"{IncIndent}",
			"System.Linq.Expressions.Expression.New(typeof({Item}Collection));",
			"{DecIndent}",
		"/// <summary>",
		"/// Get the expression tree associated with this instance of IQueryable.",
		"/// </summary>",
		"public System.Linq.Expressions.Expression Expression",
		"{",
		"{IncIndent}",
			"get { return mExpression; }",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Load {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// Load all {LItems}.",
		"/// </summary>",
		"public bool Load()",
		"{",
		"{IncIndent}",
			"bankEntities cx = Context;",
			"bool rv = false;   // Return Value.",
			"",
			"this.Clear();",
			"cx.bnk{Items}.Load();",
			"foreach(bnk{Item} ci in cx.bnk{Items})",
			"{",
			"{IncIndent}",
				"this.Add(new {Item}Item(this, ci));",
				"{DecIndent}",
			"}",
			"return rv;",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Queryable {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// Get a reference to the queryable list for this collection.",
		"/// </summary>",
		"public IQueryable<CustomerItem> Queryable",
		"{",
		"{IncIndent}",
			"get",
			"{",
			"{IncIndent}",
				"return this.AsQueryable();",
				"{DecIndent}",
			"}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Remove {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// Remove the specified {LItem} from the collection.",
		"/// </summary>",
		"public new void Remove({Item}Item {LItem})",
		"{",
		"{IncIndent}",
			"{Item}Item ci = null;",
			"",
			"if({LItem} != null)",
			"{",
			"{IncIndent}",
				"// Value is specified.",
				"ci = this.First(r => r.{Item}ID == {LItem}.{Item}ID);",
				"if(ci != null)",
				"{",
				"{IncIndent}",
					"// Member item found.",
					"if(ci.EntityItem != null && mContext != null)",
					"{",
					"{IncIndent}",
						"mContext.bnk{Items}.Remove((bnk{Item})ci.EntityItem);",
						"{DecIndent}",
					"}",
					"this.Remove(ci);",
					"{DecIndent}",
				"}",
				"{DecIndent}",
			"}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* SaveChanges {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// Save all of the changes in the associated entity collection.",
		"/// </summary>",
		"public void SaveChanges()",
		"{",
		"{IncIndent}",
			"bankEntities cx = Context;",
			"",
			"cx.SaveChanges();",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* SetItemModified {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// Set the background state to modified for the specified item.",
		"/// </summary>",
		"public void SetItemModified({Item}Item item)",
		"{",
		"{IncIndent}",
			"if(item != null && item.EntityItem != null && mContext != null)",
			"{",
			"{IncIndent}",
				"mContext.Entry(item.EntityItem).State = EntityState.Modified;",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"{DecIndent}",
	"}",
	"",
	"//*-------------------------------------------------------------------------*",
	"//* {Item}Item {SpaceTo(73)}*",
	"//*-------------------------------------------------------------------------*",
	"/// <summary>",
	"/// Information about the {LItem}.",
	"/// </summary>",
	"[[DataContract]]",
	"public class {Item}Item : TransientItem",
	"{IncIndent}",
		"{Include(PrivateSection.json)}",
		"private static List<string> {Item}ItemPropertyNames =",
		"{IncIndent}",
			"new List<string>(",
			"new string[[]] { {FieldNameList} });",
			"{DecIndent}",
		"",
		"{Include(ProtectedSection.json)}",
		"{Include(PublicSection.json)}",
		"//*-----------------------------------------------------------------------*",
		"//* _Constructor {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// Create a new Instance of the {Item}Item Item.",
		"/// </summary>",
		"public {Item}Item()",
		"{",
		"{IncIndent}",
			"PropertyNames = {Item}ItemPropertyNames;",
			"{DecIndent}",
		"}",
		"//*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*",
		"/// <summary>",
		"/// Create a new Instance of the {Item}Item Item.",
		"/// </summary>",
		"public {Item}Item({Item}Collection parent, bnk{Item} {LItem}) :",
		"{IncIndent}",
			"this()",
			"{DecIndent}",
		"{",
		"{IncIndent}",
			"mParent = parent;",
			"EntityItem = {LItem};",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"{LoopStart(name:propertyName;level:entry;expression:{Length([Source])}>0)}",
		"//*-----------------------------------------------------------------------*",
		"//* [Name] {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"{ConditionStart(name:propertyNameLocal;expression:{Instr([Source],set)}>0)}",
		"private [DataType] m[Name] = [DefaultValue];",
		"{ConditionEnd(name:propertyNameLocal)}",
		"/// <summary>",
		"/// Get{IIF({Instr([Source],set)}>0,/Set,)} the [DisplayName] of the {LItem}.",
		"/// </summary>",
		"[[DataMember]]",
		"public [DataType] [Name]",
		"{",
		"{IncIndent}",
			"{ConditionStart(name:propertyNameGetField;expression:{Instr([Source],override)}=0 AND {Instr([Source],SQL)}=0)}",
			"get { return m[Name]; }",
			"{ConditionEnd(name:propertyNameGetField)}",
			"{ConditionStart(name:propertyNameGetExp;expression:{Instr([Source],override)}>0)}",
			"get",
			"{",
			"{IncIndent}",
				"return [Override];",
				"{DecIndent}",
			"}",
			"{ConditionEnd(name:propertyNameGetExp)}",
			"{ConditionStart(name:propertyNameGetData;expression:{Instr([Source],sql)}>0)}",
			"get",
			"{",
			"{IncIndent}",
				"return SQLHelper.GetScalar{SqlType([DataType])}(",
				"{IncIndent}",
					"\"SELECT [Select] AS [Alias] \" +",
					"\"FROM [Table] \" +",
					"\"WHERE [KeyName] = \" + SQLHelper.ToSql([KeyValue])",
					"{DecIndent}",
				"{DecIndent}",
			"{ConditionEnd(name:propertyNameGetData)}",
			"{ConditionStart(name:propertyNameSet;expression:{Instr([Source],set)}>0)}",
			"set",
			"{",
			"{IncIndent}",
				"m[Name] = value;",
				"OnPropertyChanged(\"[Name]\");",
				"{DecIndent}",
			"}",
			"{ConditionEnd(name:propertyNameSet)}",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"{LoopEnd(name:propertyName)}",
		"//*-----------------------------------------------------------------------*",
		"//* Parent {SpaceTo(73)}*",
		"//*-----------------------------------------------------------------------*",
		"private {Item}Collection mParent = null;",
		"/// <summary>",
		"/// Get/Set a reference to the parent collection to which this item is",
		"/// attached.",
		"/// </summary>",
		"public {Item}Collection Parent",
		"{",
		"{IncIndent}",
			"get { return mParent; }",
			"set { mParent = value; }",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"{DecIndent}",
	"}",
	"{DecIndent}",
"}"
]
