[
"{SetValue(Item:{ObjectName})}",
"{SetValue(Items:{Plural(ObjectName)})}",
"{SetValue(LItem:{Lower({ObjectName})})}",
"{SetValue(LItems:{Plural({LItem})})}",
"using System;",
"using System.Collections.Generic;",
"using System.Data;",
"using System.Data.Entity;",
"using System.Data.Entity.Infrastructure;",
"using System.Linq;",
"using System.Net;",
"using System.Net.Http;",
"using System.Web.Http;",
"using System.Web.Http.Description;",
"",
"using BankViewModel;",
"",
"namespace BankWEB",
"{",
"{IncIndent}",
	"//*-------------------------------------------------------------------------*",
	"//* {Items}Controller {SpaceTo(76)}*",
	"//*-------------------------------------------------------------------------*",
	"/// <summary>",
	"/// Web API 2 Controller for transient {LItem} objects.",
	"/// </summary>",
	"public class {Items}Controller : ApiController",
	"{",
	"{IncIndent}",
		"{Include(PrivateSection.json)}",
		"private bankEntities mDB = new bankEntities();",
		"",
		"{Include(ProtectedSection.json)}",
		"//*-----------------------------------------------------------------------*",
		"//* Dispose {SpaceTo(74)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// When disposing, also dispose of the context.",
		"/// </summary>",
		"/// <param name=\"disposing\"></param>",
		"protected override void Dispose(bool disposing)",
		"{",
		"{IncIndent}",
			"if(disposing)",
			"{",
			"{IncIndent}",
				"mDB.Dispose();",
				"{DecIndent}",
			"}",
			"base.Dispose(disposing);",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"{Include(PrivateSection.json)}",
		"//*-----------------------------------------------------------------------*",
		"//* _Constructor {SpaceTo(74)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// Create a new Instance of the {Items}Controller Item.",
		"/// </summary>",
		"public {Items}Controller()",
		"{",
		"{IncIndent}",
			"m{Items} = new {Item}Collection(mDB);",
			"m{Items}.Load();",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* {Items} {SpaceTo(74)}*",
		"//*-----------------------------------------------------------------------*",
		"private {Item}Collection m{Items} = null;",
		"/// <summary>",
		"/// Get a reference to the collection of {LItems} driven by this",
		"/// interface.",
		"/// </summary>",
		"public {Item}Collection {Items}",
		"{",
		"{IncIndent}",
			"get { return m{Items}; }",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Delete{Item} {SpaceTo(74)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// DELETE: api/{Items}/5",
		"/// </summary>",
		"/// <remarks>",
		"/// Delete the specified {LItem}.",
		"/// </remarks>",
		"[ResponseType(typeof({Item}Item))]",
		"public IHttpActionResult Delete{Item}(int id)",
		"{",
		"{IncIndent}",
			"{Item}Item ci = m{Items}.First(r => r.{Item}ID == id);",
			"if(ci == null)",
			"{",
			"{IncIndent}",
				"return NotFound();",
				"{DecIndent}",
			"}",
			"",
			"m{Items}.Remove(ci);",
			"m{Items}.SaveChanges();",
			"",
			"return Ok(ci);",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Get{Item} {SpaceTo(74)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// GET: api/{Items}/5",
		"/// </summary>",
		"/// <remarks>",
		"/// <para>",
		"/// Return the specified {LItem}.",
		"/// </para>",
		"/// <para>",
		"/// Even with a single entry, it is important to return an array due to",
		"/// the fact that the Kendo UI DataSource will only bind to an array.",
		"/// </para>",
		"/// </remarks>",
		"[ResponseType(typeof({Item}Item[[]]))]",
		"public IHttpActionResult Get{Item}(int id)",
		"{",
		"{IncIndent}",
			"{Item}Item ci = m{Items}.First(r => r.{Item}ID == id);",
			"{Item}Item[] ro = new {Item}Item[] { ci };",
			"if(ci == null)",
			"{",
			"{IncIndent}",
				"return NotFound();",
				"{DecIndent}",
			"}",
			"",
			"return Ok(ro);",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Get{Items} {SpaceTo(74)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// GET: api/{Items}",
		"/// </summary>",
		"/// <remarks>",
		"/// Return all {LItems}.",
		"/// </remarks>",
		"public IQueryable<{Item}Item> Get{Items}()",
		"{",
		"{IncIndent}",
			"m{Items}.Load();",
			"return m{Items}.AsQueryable<{Item}Item>();",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Lookup {SpaceTo(74)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// Return the identifying information for a single {LItem} record.",
		"/// </summary>",
		"/// <remarks>",
		"/// <para>",
		"/// Return the ID and default text of specified {LItem}.",
		"/// </para>",
		"/// </remarks>",
		"public IDTextItem Lookup(int id)",
		"{",
		"{IncIndent}",
			"{Item}Item ci = m{Items}.First(r => r.{Item}ID == id);",
			"IDTextItem di = IDTextItem.Assign(ci, {DefaultFieldName}, {IDFieldName});",
			"",
			"return di;",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Lookups {SpaceTo(74)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// Return the collection of ID lookups for this entity.",
		"/// </summary>",
		"/// <remarks>",
		"/// Return the default Field and default text value for all {LItems}.",
		"/// </remarks>",
		"public IDTextCollection Lookups()",
		"{",
		"{IncIndent}",
			"IDTextCollection rv = new IDTextCollection();",
			"if(m{Items}.Count() == 0)",
			"{",
			"{IncIndent}",
				"m{Items}.Load();",
				"{DecIndent}",
			"}",
			"rv.AddRange(m{Items}, {IDFieldName}, {DefaultFieldName});",
			"return rv;",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Post{Item} {SpaceTo(74)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// POST: api/{Items}",
		"/// </summary>",
		"/// <remarks>",
		"/// Use an HTTP POST to store information about {AAn} {LItem}.",
		"/// JavaScriptSerializer is found in System.Web.Extensions.",
		"/// </remarks>",
		"[ResponseType(typeof({Item}Item))]",
		"public IHttpActionResult Post{Item}({Item}Item {LItem})",
		"{",
		"{IncIndent}",
			"if(!ModelState.IsValid)",
			"{",
			"{IncIndent}",
				"return BadRequest(ModelState);",
				"{DecIndent}",
			"}",
			"",
			"",
			"{LItem} = m{Items}.AddOrUpdate({LItem});",
			"m{Items}.SaveChanges();",
			"",
			"return CreatedAtRoute(DefaultApi,",
			"{IncIndent}",
				"new { id = {LItem}.{Item}ID }, {LItem});",
				"{DecIndent}",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"",
		"//*-----------------------------------------------------------------------*",
		"//* Put{Item} {SpaceTo(74)}*",
		"//*-----------------------------------------------------------------------*",
		"/// <summary>",
		"/// PUT: api/{Items}/5",
		"/// </summary>",
		"[ResponseType(typeof(void))]",
		"public IHttpActionResult Put{Item}(int id, {Item}Item {LItem})",
		"{",
		"{IncIndent}",
			"if(!ModelState.IsValid)",
			"{",
			"{IncIndent}",
				"return BadRequest(ModelState);",
				"{DecIndent}",
			"}",
			"",
			"if(id != {LItem}.{Item}ID || !m{Items}.Exists(id))",
			"{",
			"{IncIndent}",
				"return BadRequest();",
				"{DecIndent}",
			"}",
			"",
			"{LItem} = m{Items}.AddOrUpdate({LItem});",
			"m{Items}.SaveChanges();",
			"",
			"return StatusCode(HttpStatusCode.NoContent);",
			"{DecIndent}",
		"}",
		"//*-----------------------------------------------------------------------*",
		"}",
		"{DecIndent}",
	"}",
	"{DecIndent}",
"}"
]
