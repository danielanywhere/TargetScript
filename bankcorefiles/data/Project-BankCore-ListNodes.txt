Node List: HTMLSPAJavaScript
_config_:{Name}.OutputFilename:../output/spa/IndexViewModel.js
/**/
/* Global Functions and Values */
/**/
/*--*/
/* booleanToNumber */
/*--*/
/**
{IncIndent}
* Return a 1 or 0 number value corresponding to the caller's input.
* @param {{boolean}} value Boolean value to inspect.
* @returns {{number}} 1 or 0 representation of the caller's value.
*/
{DecIndent}
function booleanToNumber(value)
{
{IncIndent}
return (value ? 1 : 0);
{DecIndent}
}
/*--*/

/*--*/
/* getFormattedDate */
/*--*/
/**
{IncIndent}
* Return the user-readable version of a date.
* @param {{object}} date The date to convert to printable.
* @returns {{string}} The caller's date, formatted for MM/DD/YY.
*/
{DecIndent}
function getFormattedDate(date)
{
 var day = date.getDate().toString();
 var month = (1 + date.getMonth()).toString();
{IncIndent}
var result = "";
{DecIndent}
 var year = date.getFullYear();

 month = month.length > 1 ? month : '0' + month;
 day = day.length > 1 ? day : '0' + day;

{IncIndent}
result = month + '/' + day + '/' + year;
if(result == "12/31/1969")
{
{IncIndent}
result = "";
{DecIndent}
}
return result;
{DecIndent}
}
/*--*/

/*--*/
/* loadData */
/*--*/
/**
{IncIndent}
* Load the server data and populate the local tables.
*/
{DecIndent}
function loadData()
{
{IncIndent}
var data = null;
var reply = "";
{DecIndent}

{IncIndent}
$(".jsGrid").jsGrid("_showLoading");
$.ajax({
{IncIndent}
type: "GET",
url: "/indexdata",
success: loadDataSuccess,
complete: loadDataComplete
{DecIndent}
});
{DecIndent}
}
/*--*/

/*--*/
/* loadDataComplete */
/*--*/
/**
{IncIndent}
* Called when the data load operation has completed.
* @param {{object}} jqXHR Equivalent of the XMLHttpRequest object.
* @param {{string}} status Status message of the operation.
*/
{DecIndent}
function loadDataComplete(jqXHR, status)
{
{IncIndent}
$(".jsGrid").jsGrid("_hideLoading");
{DecIndent}
}
/*--*/

/*--*/
/* loadDataSuccess */
/*--*/
/**
{IncIndent}
* Called when the data load operation has successfully received data from the
* server.
* @param {{object}} result Data received from the server. If everything went as
* expected, the format will already be JSON.
*/
{DecIndent}
function loadDataSuccess(result)
{
{IncIndent}
var rCount = 0;
var rIndex = 0;
var target = null;
var tCount = result.length;
var tIndex = 0;
var tItem = null;
console.log("loadData: received " + tCount + " tables..");
for(tIndex = 0; tIndex < tCount; tIndex ++)
{
{IncIndent}
tItem = result[[tIndex]];
console.log("Set " + tItem.Name + " data / record count: " + tItem.Table.length);
target = null;
switch(tItem.Name)
{
{IncIndent}
case "Accounts":
{IncIndent}
target = accountsViewModel.accounts;
break;
{DecIndent}
case "Branches":
{IncIndent}
target = branchesViewModel.branches;
break;
{DecIndent}
case "Customers":
{IncIndent}
target = customersViewModel.customers;
break;
{DecIndent}
case "Employees":
{IncIndent}
target = employeesViewModel.employees;
break;
{DecIndent}
{DecIndent}
}
if(target)
{
{IncIndent}
target.length = 0;
rCount = tItem.Table.length;
for(rIndex = 0; rIndex < rCount; rIndex ++)
{
{IncIndent}
// console.log(" adding record " + rIndex);
target.push(tItem.Table[[rIndex]]);
{DecIndent}
}
$("#grd" + tItem.Name).jsGrid("loadData");
$("#grd" + tItem.Name).jsGrid("refresh");
{DecIndent}
}
{DecIndent}
}
{DecIndent}
}
/*--*/

/*--*/
/* toBoolean */
/*--*/
/**
{IncIndent}
* Return a value indicating whether the caller's parameter evaluates to
* true or false.
* @param {{object}} value Value to inspect for boolean outcome.
* @returns {{boolean}} Boolean representation of the caller's value.
*/
{DecIndent}
function toBoolean(value)
{
{IncIndent}
var result = false;
if(typeof(value) == "string")
{
{IncIndent}
value = value.trim().toLocaleLowerCase();
{DecIndent}
}
switch(value)
{
{IncIndent}
case true:
case "true":
case 1:
case "1":
case "on":
case "yes":
{IncIndent}
result = true;
break;
{DecIndent}
{DecIndent}
}
return result;
{DecIndent}
}
/*--*/

/*--*/
/* toNumber */
/*--*/
/**
{IncIndent}
* Return a numeric representation of the caller's value.
* @param {{string}} value Value to convert to number.
* @returns {{number}} Numeric representation of the caller's value.
*/
function toNumber(value)
{
{IncIndent}
value = value.replace(/[\$, ]/g, "");
return parseFloat(value);
{DecIndent}
}
/*--*/

{DecIndent}
/**/
/* Custom Editors */
/**/
/*--*/
/* Date Type Field Editor */
/*--*/
/**
{IncIndent}
* Base definition of the date type field editor.
* @param {{object}} config Configuration information.
*/
{DecIndent}
var jsGridDateField = function(config)
{
{IncIndent}
jsGrid.Field.call(this, config);
{DecIndent}
}
/**
{IncIndent}
* Object definition of the date type field editor.
{DecIndent}
 */
jsGridDateField.prototype = new jsGrid.Field(
{
{IncIndent}
/**
{IncIndent}
* Text alignment for this editor.
{DecIndent}
 */
align: "center", // general property 'align'
/**
{IncIndent}
* Specific CSS reference for this editor.
{DecIndent}
 */
css: "date-field", // general property 'css'
/**
{IncIndent}
* Return the editing template of for this instance.
* @param {{object}} value Date to edit.
* @returns {{object}} jQuery object for use in editing grid value.
*/
{DecIndent}
editTemplate: function(value)
{
{IncIndent}
var grid = this._grid;
var $result = this._editPicker =
{IncIndent}
$("<input>").datepicker().
datepicker("setDate", getFormattedDate(new Date(value));
{DecIndent}
$result.on("keypress", function(e)
{
{IncIndent}
if(e.which == 13)
{
{IncIndent}
grid.updateItem();
e.preventDefault;
{DecIndent}
}
{DecIndent}
});
$result.on("keyup", function(e)
{
{IncIndent}
if(e.keyCode == 27)
{
{IncIndent}
grid.cancelEdit();
e.stopPropagation();
{DecIndent}
}
{DecIndent}
});
return $result;
{DecIndent}
},
/**
{IncIndent}
* Return the final edited value.
* @returns {{string}} Final value edited by the user.
*/
{DecIndent}
editValue: function()
{
{IncIndent}
return this._editPicker.datepicker("getDate").toISOString();
{DecIndent}
},
/**
{IncIndent}
* Return the editor to be used when inserting a new row.
* @param {{object}} value The date to edit.
* @returns {{object}} jQuery object allowing user input.
*/
{DecIndent}
insertTemplate: function(value)
{
{IncIndent}
return this._insertPicker =
{IncIndent}
$("<input>").datepicker({ defaultDate: new Date() });
{DecIndent}
{DecIndent}
},
/**
{IncIndent}
* Return the final edited value.
* @returns {{string}} Final value edited by the user, and ready
* to be inserted into the date field of a new row.
*/
{DecIndent}
insertValue: function()
{
{IncIndent}
return this._insertPicker.datepicker("getDate").toISOString();
{DecIndent}
},
/**
{IncIndent}
* Return the value of the object as a readable, formatted string.
* @param {{object}} value Raw value to be converted to date display.
* @returns {{string}} Value to be displayed directly in the grid cell.
*/
{DecIndent}
itemTemplate: function(value)
{
{IncIndent}
var result = "";
if(value)
{
{IncIndent}
result = getFormattedDate(new Date(value));
{DecIndent}
}
return result;
{DecIndent}
},
/**
{IncIndent}
* Return the comparison result between two dates.
* @param {{object}} date1 First date to compare.
* @param {{object}} date2 Next date to compare.
* @returns {{number}} The result of the comparison.
* If > 0, then date1 is larger.
* If == 0, then date1 and date2 are equal.
* If < 0, then date2 is larger.
*/
{DecIndent}
sorter: function(date1, date2)
{
{IncIndent}
return new Date(date1) - new Date(date2);
{DecIndent}
}
{DecIndent}
});
/**
{IncIndent}
* Create the date editor type within the grid.
{DecIndent}
 */
jsGrid.fields.date = jsGridDateField;
/*--*/

/*--*/
/* Expression Type Field Editor */
/*--*/
var jsGridExpressionField = function(config)
{
{IncIndent}
jsGrid.Field.call(this, config);
{DecIndent}
}
jsGridExpressionField.prototype = new jsGrid.Field(
{
{IncIndent}
align: "left", // General property 'align'
css: "expression-field", // General property 'css'
expression: "", // By default, the expression is unknown.
itemTemplate: function(value)
{
{IncIndent}
// Value should be set to the record ID.
// In this version, only implement a very basic expression
// capability:
// {{FieldName}} - Name of a field to display. Multiple field names
// are supported, and the same field name can be
// specified multiple times.
// (everything else) - As shown in the string.
// Example: "{{LastName}}, {{FirstName}}"
// Display the display name of the person by last name, comma,
// then first name.
var eValue = "";
var grid = this._grid;
var item = null;
var items = grid.data;
var matches = [];
var mCount = 0;
var mIndex = 0;
var mValue = "";
var rCount = 0;
var result = "";
var rIndex = 0;
var rName = this.name;
var rValue = "";
if(this.expression)
{
{IncIndent}
// Find the record first.
rCount = items.length;
// console.log("Expression field: rows count: " + rCount);
// console.log("Expression field: value: " + value);
// console.log("Expression field: name: " + rName);
for(rIndex = 0; rIndex < rCount; rIndex ++)
{
{IncIndent}
if(items[[rIndex]][[rName]] == value)
{
{IncIndent}
// Record found.
// console.log("Expression field: Record found..");
item = items[[rIndex]];
break;
{DecIndent}
}
{DecIndent}
}
if(item)
{
{IncIndent}
eValue = this.expression;
matches = eValue.match(/\{[0-9A-Za-z]+\}/g);
mCount = matches.length;
for(mIndex = 0; mIndex < mCount; mIndex ++)
{
{IncIndent}
mValue = matches[[mIndex]];
mValue = mValue.substr(1, mValue.length - 2);
// console.log("Expression field: Find replacement for " + mValue);
// Get the replacement value.
rValue = item[[mValue]];
// console.log("Expression field: Use " + rValue);
// Replace all instances of the field.
eValue = eValue.replace(
{IncIndent}
new RegExp("\\{" + mValue + "\\}", "gm"), rValue);
{DecIndent}
{DecIndent}
}
result = eValue;
{DecIndent}
}
// Future reference:
// result = eval("x + 1");
// if (eval(" var1 == null && var2 != 5")) { .. }
// result = (new Function("return " + expression)()) { };
{DecIndent}
}
return result;
{DecIndent}
}
{DecIndent}
});
jsGrid.fields.expression = jsGridExpressionField;
/*--*/

/*--*/
/* Money Type Field Editor */
/*--*/
var jsGridMoneyField = function(config)
{
{IncIndent}
jsGrid.Field.call(this, config);
{DecIndent}
}
jsGridMoneyField.prototype = new jsGrid.NumberField(
{
{IncIndent}
// myCustomProperty: "foo", // custom properties can be added
align: "right", // general property 'align'
css: "money-field", // general property 'css'
itemTemplate: function(value)
{
{IncIndent}
return (value).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,'); 
{DecIndent}
}
{DecIndent}
});
jsGrid.fields.money = jsGridMoneyField;
/*--*/

/*--*/
/* SelectExpression Type Field Editor */
/*--*/
var jsGridSelectExpressionField = function(config)
{
{IncIndent}
jsGrid.Field.call(this, config);
{DecIndent}
}
jsGridSelectExpressionField.prototype = new jsGrid.SelectField(
{
{IncIndent}
align: "left", // general property 'align'
css: "selectexpression-field", // general property 'css'
createSelectControl: function()
{
{IncIndent}
var $result = $("<select>");
var expression = this.expression;
var items = this.items;
var valueField = this.valueField;
var textField = this.textField;
var rex = this.resolveExpression;
var selectedIndex = this.selectedIndex;
{DecIndent}
{DecIndent}

{IncIndent}
{IncIndent}
$.each(this.items, function(index, item)
{
{IncIndent}
var value = valueField ? item[[valueField]] : index;
// var text = textField ? item[[textField]] : item;
{DecIndent}
{DecIndent}
{DecIndent}

{IncIndent}
{IncIndent}
{IncIndent}
console.log("CreateSelectControl: value: " +
{IncIndent}
value + " / " + rex(value, items, valueField, expression));
{DecIndent}
var $option = $("<option>")
{IncIndent}
.attr("value", value)
.text(rex(value, items, valueField, expression))
.appendTo($result);
{DecIndent}
{DecIndent}
{DecIndent}
{DecIndent}

{IncIndent}
{IncIndent}
{IncIndent}
$option.prop("selected", (selectedIndex == index));
{DecIndent}
});
$result.prop("disabled", !!this.readOnly);
return $result;
{DecIndent}
},
editTemplate: function(value)
{
{IncIndent}
if(!this.editing)
{
{IncIndent}
return this.itemTemplate.apply(this, arguments);
{DecIndent}
}
var grid = this._grid;
var $result = this.editControl = this.createSelectControl();
if(value)
{
{IncIndent}
$result.val(value);
{DecIndent}
}
// (value !== undefined) && $result.val(value);
// console.log("Wiring keypress for selector.");
$result.on("keypress", function(e)
{
{IncIndent}
if(e.which == 13)
{
{IncIndent}
// console.log("Selector storing changes..");
grid.updateItem();
e.preventDefault;
{DecIndent}
}
{DecIndent}
});
$result.on("keyup", function(e)
{
{IncIndent}
if(e.keyCode == 27)
{
{IncIndent}
// console.log("Selector cancelling edit..");
grid.cancelEdit();
e.stopPropagation();
{DecIndent}
}
{DecIndent}
});
return $result;
{DecIndent}
},
expression: "", // By default, the expression is unknown.
itemTemplate: function(value)
{
{IncIndent}
return this.resolveExpression(value,
{IncIndent}
this.items, this.valueField, this.expression);
{DecIndent}
{DecIndent}
},
/**
{IncIndent}
* Resolve the expression for the specified local ID value.
* @param {{object}} value The value designated by the name attribute.
* @param {{object}} items Array of items to inspect.
* @param {{string}} valueField Name of the value field to scan.
* @param {{string}} expression Expression to resolve.
* @returns {{string}} Resolved value.
*/
{DecIndent}
resolveExpression: function(value, items, valueField, expression)
{
{IncIndent}
// Value should be set to the record ID.
// In this version, only implement a very basic expression
// capability:
// {{FieldName}} - Name of a field to display. Multiple field names
// are supported, and the same field name can be
// specified multiple times.
// (everything else) - As shown in the string.
// Example: "{{LastName}}, {{FirstName}}"
// Display the display name of the person by last name, comma,
// then first name.
var eValue = "";
var item = null;
var matches = [];
var mCount = 0;
var mIndex = 0;
var mValue = "";
var rCount = 0;
var result = "";
var rIndex = 0;
var rName = valueField;
var rValue = "";
// console.log("SelectExpression..");
rCount = items.length;
// console.log("SelectExpression field: rows count: " + rCount);
// console.log("SelectExpression field: value: " + value);
// console.log("SelectExpression field: key name: " + rName);
if(expression)
{
{IncIndent}
// Find the record first.
for(rIndex = 0; rIndex < rCount; rIndex ++)
{
{IncIndent}
if(items[[rIndex]][[rName]] == value)
{
{IncIndent}
// Record found.
// console.log("SelectExpression field: Record found..");
item = items[[rIndex]];
break;
{DecIndent}
}
{DecIndent}
}
if(item)
{
{IncIndent}
eValue = expression;
matches = eValue.match(/\{[0-9A-Za-z]+\}/g);
mCount = matches.length;
for(mIndex = 0; mIndex < mCount; mIndex ++)
{
{IncIndent}
mValue = matches[[mIndex]];
mValue = mValue.substr(1, mValue.length - 2);
// console.log("Expression field: Find replacement for " + mValue);
// Get the replacement value.
rValue = item[[mValue]];
// console.log("Expression field: Use " + rValue);
// Replace all instances of the field.
eValue = eValue.replace(
{IncIndent}
new RegExp("\\{" + mValue + "\\}", "gm"), rValue);
{DecIndent}
{DecIndent}
}
result = eValue;
{DecIndent}
}
// Future reference:
// result = eval("x + 1");
// if (eval(" var1 == null && var2 != 5")) { .. }
// result = (new Function("return " + expression)()) { };
{DecIndent}
}
return result;
{DecIndent}
},
sorter: function(value1, value2)
{
{IncIndent}
// In this context, value1 and value2 both enter with values
// set to whatever was found in [field.name].
console.log("SelectExpression lookup..");
var result = 0;
var text1 = this.resolveExpression(value1,
{IncIndent}
this.items, this.valueField, this.expression);
{DecIndent}
var text2 = this.resolveExpression(value2,
{IncIndent}
this.items, this.valueField, this.expression);
{DecIndent}
if(text1 > text2)
{
{IncIndent}
result = 1;
{DecIndent}
}
else if(text1 < text2)
{
{IncIndent}
result = -1;
{DecIndent}
}
return result;
{DecIndent}
}
{DecIndent}
});
jsGrid.fields.selectexpression = jsGridSelectExpressionField;
/*--*/
/**/

$(document).ready(function()
{
/**/
/* View -> View Model Wiring */
/**/
/*--*/
/* Column Visibility */
/*--*/
{IncIndent}
$(".columnVisibility .container input[type=checkbox]").change(function()
{
{IncIndent}
// Column Name Pattern: chkcolctlxxNN
var columnName = $(this).attr("id").substr(12);
var fCount = 0;
var fields = [];
var fIndex = 0;
var fItem = null;
var $grid = null;
// Parent Name Pattern: colctlNN
var parentName = $(this).parent().parent().attr("id").substr(6);
{DecIndent}
{DecIndent}

{IncIndent}
{IncIndent}
$grid = $("#grd" + parentName);
console.log("Updating column visibility..");
console.log("Parent Name: " + parentName);
{DecIndent}
{DecIndent}

{IncIndent}
{IncIndent}
// Check fields for match.
fields = $grid.jsGrid("option", "fields");
fCount = fields.length;
console.log("Field count: " + fCount);
for(fIndex = 0; fIndex < fCount; fIndex ++)
{
{IncIndent}
fItem = fields[[fIndex]];
console.log("Checking " + fItem.name)
if(fItem.name == columnName)
{
{IncIndent}
// Name matches.
break;
{DecIndent}
}
else if(fItem.title == columnName)
{
{IncIndent}
// Switch to explicit name.
columnName = fItem.name;
break;
{DecIndent}
}
{DecIndent}
}
$grid.jsGrid("fieldOption", columnName,
{IncIndent}
"visible", $(this).prop("checked"));
{DecIndent}
{DecIndent}
});
{DecIndent}
/*--*/

/*--*/
/* Row Filtering */
/*--*/
{IncIndent}
$(".rowFilter input[type=button]").click(function()
{
{IncIndent}
// Button Name Pattern: btnfiltxxNN.
var buttonName = $(this).attr("id").substr(10);
var externalFilters = [];
var fields = [];
var $grid = null;
// Text Name Pattern: txtfiltxxNN.
var itemName = "";
var itemValue = "";
// Parent Name Pattern: filtNN
var parentName = $(this).parent().attr("id").substr(4);
var $texts = $(this).parent().find("label input[type=text]");
{DecIndent}
{DecIndent}

{IncIndent}
{IncIndent}
$grid = $("#grd" + parentName);
fields = $grid.jsGrid("option", "fields");
externalFilters = $grid.jsGrid("option", "externalFilters");
if(buttonName == "Apply")
{
{IncIndent}
$texts.each(function(tItem)
{
{IncIndent}
itemName = $(this).attr("id").substr(10);
itemValue = $(this).val();
externalFilters[[itemName]] = itemValue;
// console.log("External Filtering: " +
// itemName + "=" + externalFilters[[itemName]]);
{DecIndent}
});
{DecIndent}
}
else if(buttonName == "Clear")
{
{IncIndent}
$texts.each(function(tItem)
{
{IncIndent}
$(this).val("");
itemName = $(this).attr("id").substr(10);
externalFilters[[itemName]] = "";
{DecIndent}
});
{DecIndent}
}
// In this context, search is used to reload the data to the UI.
$grid.jsGrid("search");
{DecIndent}
});
{DecIndent}
/*--*/

/*--*/
/* Expanding Sections */
/*--*/
{IncIndent}
$(".tabAccordian").accordion(
{IncIndent}
{ collapsible: true, active: false, heightStyle: "content" }
{DecIndent}
);
{DecIndent}
/*--*/

/*--*/
/* Tab Pages */
/*--*/
{IncIndent}
$("#tabs").tabs({
{IncIndent}
activate: function(event, ui)
{
{IncIndent}
switch(ui.newPanel.attr('id'))
{
{IncIndent}
_loop_:{Lower({ObjectName})}=account
 case "{Plural({ObjectName})}":
 {IncIndent}
 // Reload all tables.
 console.log("Tab Selected: {Plural({ObjectName})}..");
 _loop_:
  _loop_:{IsDefault()}
   $("#grd{Plural({ObjectName})}").jsGrid("fieldOption", "[Name]",
   {IncIndent}
   "items", {Lower({Plural({ObjectName})})}ViewModel.{Lower({Plural({ObjectName})})});
   {DecIndent}
 break;
 {DecIndent}
_loop_:{Lower({ObjectName})}<>account
 case "{Plural({ObjectName})}":
 {IncIndent}
 // Refresh display.
 $("#grd{Plural({ObjectName})}").jsGrid("refresh");
 break;
 {DecIndent}
{DecIndent}
}
{DecIndent}
}
{DecIndent}
});
{DecIndent}
/*--*/

_loop_:
 /*--*/
 /* {Plural({ObjectName})} View {SpaceTo(77)}*/
 /*--*/
 $("#grd{Plural({ObjectName})}").jsGrid(
 {
 {IncIndent}
 height: "70vh",
 width: "100%",
 
 filtering: false,
 editing: true,
 sorting: true,
 paging: true,
 autoload: true,
 
 pageSize: 4,
 pageButtonCount: 5,
 
 deleteConfirm: "Do you really want to delete the {Lower({ObjectName})}?",
 loadMessage: "Loading..",
 
 controller: {Lower({Plural({ObjectName})})}ViewModel,
 
 fields: [
 {IncIndent}
 _loop_:
  {
  {IncIndent}
  name: "[Name]",
  _condition_:{Length([Title])}>0
   title: "[GridTitle]",
  type: "[GridType]",
  _condition_:{Instr([GridType],select)}>0
   items: [GridItemsSource],
   valueField: [GridItemsValueField],
   textField: [GridItemsTextField],
  _condition_:{Length([GridEditing])}>0
   editing: "[GridEditing]",
  _condition_:{Length([Width])}>0
   width: [Width],
  {DecIndent}
  },
 { type: "control" }
 {DecIndent}
 ]
 {DecIndent}
 });
 /*--*/
 

/*--*/
/* Get Server Data */
/*--*/
loadData();
/*--*/
/**/

};

(function()
{
/**/
/* View Models */
/**/
_loop_:
 {ValueSet(multiple:{Plural({Lower({ObjectName})})})}
 {ValueSet(lower:{Lower({ObjectName})})}
 /*--*/
 /* {Plural({ObjectName})} View Model {SpaceTo(77)}*/
 /*--*/
 {IncIndent}
 var {multiple}ViewModel =
 {
 {IncIndent}
 deleteItem: function(deletedItem)
 {
 {IncIndent}
 var {lower}Index = $.inArray(deletedItem, this.{multiple});
 this.{multiple}.splice({lower}Index, 1);
 {DecIndent}
 },
 insertItem: function(newItem)
 {
 {IncIndent}
 this.{multiple}.push(newItem);
 {DecIndent}
 },
 loadData: function(filter)
 {
 {IncIndent}
 console.log("{multiple}DB.loadData..");
 var cCount = this.{multiple}.length;
 var cIndex = 0;
 var cItem = null;
 var grid = $("#grd{Plural({ObjectName})}");
 var result = this.{multiple};
 // Remove dashes from tickets.
 for(cIndex = 0; cIndex < cCount; cIndex ++)
 {
 {IncIndent}
 cItem = this.{multiple}[[cIndex]];
 cItem.[TicketName] =
 {IncIndent}
 cItem.[TicketName].replace(/-/g, ' ');
 {DecIndent}
 {DecIndent}
 }
 if(grid.jsGrid("option", "filtering"))
 {
 {IncIndent}
 // Support for internal filtering.
 // This leg used when grid filtering is on.
 result = $.grep(this.accounts, function(account)
 {
 {IncIndent}
 return (!filter.[Name] ||
 {IncIndent}
 _loop_:[GridType]=text
  _condition_:NOT {isFirst}
   (!filter.[Name] ||
  {lower}.[TicketName].toLowerCase().
  indexOf(filter.[TicketName].toLowerCase()) > -1){IIF(NOT {isLast}, &&,;)}
 {DecIndent}
 {DecIndent}
 });
 {DecIndent}
 }
 else if(grid.jsGrid("option", "externalFilters"))
 {
 {IncIndent}
 // This leg supports external filtering.
 var externalFilters = grid.jsGrid("option", "externalFilters");
 var fCount = 0;
 var fields = grid.jsGrid("option", "fields");
 var filterName = "";
 var filterValue = "";
 var fIndex = 0;
 var fItem = null;
 var itemTemplate = null;
 var kCount = 0;
 var keys = Object.keys(externalFilters);
 var kIndex = 0;
 
 kCount = keys.length;
 fCount = fields.length;
 // console.log("Account loadData / key count: " + kCount);
 // console.log("Account loadData / field count: " + fCount);
 if(kCount > 0 && fCount > 0)
 {
 {IncIndent}
 for(kIndex = 0; kIndex < kCount; kIndex ++)
 {
 {IncIndent}
 filterName = keys[[kIndex]];
 filterValue = externalFilters[[filterName]];
 if(filterValue)
 {
 {IncIndent}
 // Filter specified. Get the actual field name.
 for(fIndex = 0; fIndex < fCount; fIndex ++)
 {
 {IncIndent}
 if(filterName == fields[[fIndex]].Title)
 {
 {IncIndent}
 // Assign the same search to the filter for the base column.
 externalFilters[fields[[fIndex]].name] = filterValue;
 break;
 {DecIndent}
 }
 {DecIndent}
 }
 {DecIndent}
 }
 {DecIndent}
 }
 
 // Indirect filtering example.
 result = $.grep(this.accounts, function(account)
 {
 {IncIndent}
 var fieldItem = null;
 var fieldName = "";
 var fieldType = "";
 var filterFunction = "";
 var filterParts = [];
 var gResult = true;
 var itemValue = null;
 
 // console.log("Checking " + kCount + " filters..");
 for(kIndex = 0; kIndex < kCount; kIndex ++)
 {
 {IncIndent}
 filterName = keys[[kIndex]];
 console.log("Filter: " + filterName);
 filterFunction = "";
 filterValue = externalFilters[[filterName]];
 if(filterName.indexOf(".") > -1)
 {
 {IncIndent}
 // Aggregate, Range, or Function is in use.
 // Currently, only range is supported.
 filterParts = filterName.split(".");
 filterName = filterParts[0];
 filterFunction = filterParts[1].toLowerCase();
 {DecIndent}
 }
 if(filterValue)
 {
 {IncIndent}
 // Filter specified.
 fieldName = "";
 for(fIndex = 0; fIndex < fCount; fIndex ++)
 {
 {IncIndent}
 fieldItem = fields[[fIndex]];
 if(fieldItem.name == filterName ||
 {IncIndent}
 fieldItem.title == filterName)
 {DecIndent}
 {
 {IncIndent}
 // Field found for filter.
 fieldName = fieldItem.name;
 itemTemplate = fieldItem.itemTemplate;
 if(fieldItem.title == filterName)
 {
 {IncIndent}
 // Copy the filter to the actual field.
 externalFilters[[fieldName]] = filterValue;
 {DecIndent}
 }
 break;
 {DecIndent}
 }
 {DecIndent}
 }
 if(fieldName)
 {
 {IncIndent}
 itemValue = itemTemplate.call(fieldItem, account[[fieldName]]);
 // console.log("Checking " + fieldName + " for " + itemValue);
 if(filterFunction)
 {
 {IncIndent}
 // Aggregate, Range, or Function comparison.
 // Currently, only range is supported.
 fieldType = fieldItem.type;
 switch(filterFunction)
 {
 {IncIndent}
 case "max":
 {IncIndent}
 switch(fieldType)
 {
 {IncIndent}
 case "checkbox":
 {IncIndent}
 if(booleanToNumber(toBoolean(itemValue)) >
 {IncIndent}
 booleanToNumber(toBoolean(filterValue))
 {DecIndent}
 {
 {IncIndent}
 gResult = false;
 {DecIndent}
 }
 break;
 {DecIndent}
 case "date":
 {IncIndent}
 if(new Date(itemValue) > new Date(filterValue))
 {
 {IncIndent}
 gResult = false;
 {DecIndent}
 }
 break;
 {DecIndent}
 case "money":
 case "number":
 {IncIndent}
 if(toNumber(itemValue) > toNumber(filterValue))
 {
 {IncIndent}
 gResult = false;
 {DecIndent}
 }
 break;
 {DecIndent}
 case "select":
 case "selectexpression":
 case "text":
 case "textarea":
 {IncIndent}
 if(itemValue > filterValue)
 {
 {IncIndent}
 gResult = false;
 {DecIndent}
 }
 break;
 {DecIndent}
 {DecIndent}
 }
 break;
 {DecIndent}
 case "min":
 {IncIndent}
 switch(fieldType)
 {
 {IncIndent}
 case "checkbox":
 {IncIndent}
 if(booleanToNumber(toBoolean(itemValue)) <
 {IncIndent}
 booleanToNumber(toBoolean(filterValue))
 {DecIndent}
 {
 {IncIndent}
 gResult = false;
 {DecIndent}
 }
 break;
 {DecIndent}
 case "date":
 {IncIndent}
 console.log("Min Date Filter (" +
 {IncIndent}
 itemValue + " < " + filterValue + ")?");
 {DecIndent}
 if(new Date(itemValue) < new Date(filterValue))
 {
 {IncIndent}
 gResult = false;
 {DecIndent}
 }
 break;
 {DecIndent}
 case "money":
 case "number":
 {IncIndent}
 console.log("Min Number Filter (" +
 toNumber(itemValue) + " < " + toNumber(filterValue) + ")?");
 if(toNumber(itemValue) < toNumber(filterValue))
 {
 {IncIndent}
 gResult = false;
 {DecIndent}
 }
 break;
 {DecIndent}
 case "select":
 case "selectexpression":
 case "text":
 case "textarea":
 {IncIndent}
 if(itemValue < filterValue)
 {
 {IncIndent}
 gResult = false;
 {DecIndent}
 }
 break;
 {DecIndent}
 {DecIndent}
 }
 break;
 {DecIndent}
 {DecIndent}
 }
 if(!gResult)
 {
 {IncIndent}
 break;
 {DecIndent}
 }
 {DecIndent}
 }
 else
 {
 {IncIndent}
 // Straight value comparison.
 if(itemValue.toLowerCase().
 indexOf(externalFilters[[fieldName]]) < 0)
 {
 {IncIndent}
 // console.log("Filter non-match in " + fieldName);
 gResult = false;
 break;
 {DecIndent}
 }
 {DecIndent}
 }
 {DecIndent}
 }
 {DecIndent}
 }
 else
 {
 {IncIndent}
 // Make sure that if this filter is empty, any indirectly related
 // filter value is also empty.
 fieldName = "";
 for(fIndex = 0; fIndex < fCount; fIndex ++)
 {
 {IncIndent}
 fieldItem = fields[[fIndex]];
 if(fieldItem.title == filterName)
 {
 {IncIndent}
 // Field found for filter.
 externalFilters[fieldItem.name] = "";
 break;
 {DecIndent}
 }
 {DecIndent}
 }
 {DecIndent}
 }
 {DecIndent}
 }
 return gResult;
 {DecIndent}
 });
 }
 {DecIndent}
 {DecIndent}
 }
 return result;
 {DecIndent}
 },
 updateItem: function(changedItem)
 {
 }
 {DecIndent}
 };
 window.{multiple}ViewModel = {multiple}ViewModel;
 {DecIndent}
 /*--*/
 

/**/
/* Models */
/**/
/*--*/
/* Account States */
/*--*/
{IncIndent}
accountsViewModel.accountStates =
[
{IncIndent}
{
{IncIndent}
"StateName": "Active"
{DecIndent}
},
{
{IncIndent}
"StateName": "Closed"
{DecIndent}
},
{
{IncIndent}
"StateName": "Pending"
{DecIndent}
}
{DecIndent}
];
/*--*/

_loop_:
 /*--*/
 /* {ObjectName} Models {SpaceTo(77)}*/
 /*--*/
 {IncIndent}
 {Plural({Lower({ObjectName})})}ViewModel.{Plural({Lower({ObjectName})})} = [];
 {DecIndent}
 /*--*/
/**/

}());

