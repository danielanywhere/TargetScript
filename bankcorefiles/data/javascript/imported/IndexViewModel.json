[
"/*****************************************************************************/",
"/* Global Functions and Values                                               */",
"/*****************************************************************************/",
"/*---------------------------------------------------------------------------*/",
"/* booleanToNumber                                                           */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Return a 1 or 0 number value corresponding to the caller's input.",
	"* @param {{boolean}} value Boolean value to inspect.",
	"* @returns {{number}} 1 or 0 representation of the caller's value.",
	"*/",
	"{DecIndent}",
"function booleanToNumber(value)",
"{",
"{IncIndent}",
	"return (value ? 1 : 0);",
	"{DecIndent}",
"}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* getFormattedDate                                                          */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Return the user-readable version of a date.",
	"* @param {{object}} date The date to convert to printable.",
	"* @returns {{string}} The caller's date, formatted for MM/DD/YYYY.",
	"*/",
	"{DecIndent}",
"function getFormattedDate(date)",
"{",
" var day = date.getDate().toString();",
" var month = (1 + date.getMonth()).toString();",
"{IncIndent}",
	"var result = \"\";",
	"{DecIndent}",
" var year = date.getFullYear();",
"",
" month = month.length > 1 ? month : '0' + month;",
" day = day.length > 1 ? day : '0' + day;",
"",
"{IncIndent}",
	"result = month + '/' + day + '/' + year;",
	"if(result == \"12/31/1969\")",
	"{",
	"{IncIndent}",
		"result = \"\";",
		"{DecIndent}",
	"}",
	"return result;",
	"{DecIndent}",
"}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* loadData                                                                  */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Load the server data and populate the local tables.",
	"*/",
	"{DecIndent}",
"function loadData()",
"{",
"{IncIndent}",
	"var data = null;",
	"var reply = \"\";",
	"{DecIndent}",
"",
"{IncIndent}",
	"$(\".jsGrid\").jsGrid(\"_showLoading\");",
	"$.ajax({",
	"{IncIndent}",
		"type: \"GET\",",
		"url: \"/indexdata\",",
		"success: loadDataSuccess,",
		"complete: loadDataComplete",
		"{DecIndent}",
	"});",
	"{DecIndent}",
"}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* loadDataComplete                                                          */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Called when the data load operation has completed.",
	"* @param {{object}} jqXHR Equivalent of the XMLHttpRequest object.",
	"* @param {{string}} status Status message of the operation.",
	"*/",
	"{DecIndent}",
"function loadDataComplete(jqXHR, status)",
"{",
"{IncIndent}",
	"$(\".jsGrid\").jsGrid(\"_hideLoading\");",
	"{DecIndent}",
"}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* loadDataSuccess                                                           */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Called when the data load operation has successfully received data from the",
	"* server.",
	"* @param {{object}} result Data received from the server. If everything went as",
	"* expected, the format will already be JSON.",
	"*/",
	"{DecIndent}",
"function loadDataSuccess(result)",
"{",
"{IncIndent}",
	"var rCount = 0;",
	"var rIndex = 0;",
	"var target = null;",
	"var tCount = result.length;",
	"var tIndex = 0;",
	"var tItem = null;",
	"console.log(\"loadData: received \" + tCount + \" tables...\");",
	"for(tIndex = 0; tIndex < tCount; tIndex ++)",
	"{",
	"{IncIndent}",
		"tItem = result[[tIndex]];",
		"console.log(\"Set \" + tItem.Name + \" data / record count: \" + tItem.Table.length);",
		"target = null;",
		"switch(tItem.Name)",
		"{",
		"{IncIndent}",
			"case \"Accounts\":",
			"{IncIndent}",
				"target = accountsViewModel.accounts;",
				"break;",
				"{DecIndent}",
			"case \"Branches\":",
			"{IncIndent}",
				"target = branchesViewModel.branches;",
				"break;",
				"{DecIndent}",
			"case \"Customers\":",
			"{IncIndent}",
				"target = customersViewModel.customers;",
				"break;",
				"{DecIndent}",
			"case \"Employees\":",
			"{IncIndent}",
				"target = employeesViewModel.employees;",
				"break;",
				"{DecIndent}",
			"{DecIndent}",
		"}",
		"if(target)",
		"{",
		"{IncIndent}",
			"target.length = 0;",
			"rCount = tItem.Table.length;",
			"for(rIndex = 0; rIndex < rCount; rIndex ++)",
			"{",
			"{IncIndent}",
				"// console.log(\" adding record \" + rIndex);",
				"target.push(tItem.Table[[rIndex]]);",
				"{DecIndent}",
			"}",
			"$(\"#grd\" + tItem.Name).jsGrid(\"loadData\");",
			"$(\"#grd\" + tItem.Name).jsGrid(\"refresh\");",
			"{DecIndent}",
		"}",
		"{DecIndent}",
	"}",
	"{DecIndent}",
"}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* toBoolean                                                                 */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Return a value indicating whether the caller's parameter evaluates to",
	"* true or false.",
	"* @param {{object}} value Value to inspect for boolean outcome.",
	"* @returns {{boolean}} Boolean representation of the caller's value.",
	"*/",
	"{DecIndent}",
"function toBoolean(value)",
"{",
"{IncIndent}",
	"var result = false;",
	"if(typeof(value) === \"string\")",
	"{",
	"{IncIndent}",
		"value = value.trim().toLocaleLowerCase();",
		"{DecIndent}",
	"}",
	"switch(value)",
	"{",
	"{IncIndent}",
		"case true:",
		"case \"true\":",
		"case 1:",
		"case \"1\":",
		"case \"on\":",
		"case \"yes\":",
		"{IncIndent}",
			"result = true;",
			"break;",
			"{DecIndent}",
		"{DecIndent}",
	"}",
	"return result;",
	"{DecIndent}",
"}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* toNumber                                                                  */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Return a numeric representation of the caller's value.",
	"* @param {{string}} value Value to convert to number.",
	"* @returns {{number}} Numeric representation of the caller's value.",
	"*/",
	"function toNumber(value)",
	"{",
	"{IncIndent}",
		"value = value.replace(/[\\$, ]/g, \"\");",
		"return parseFloat(value);",
		"{DecIndent}",
	"}",
	"/*---------------------------------------------------------------------------*/",
	"",
	"{DecIndent}",
"/*****************************************************************************/",
"/* Custom Editors                                                            */",
"/*****************************************************************************/",
"/*---------------------------------------------------------------------------*/",
"/* Date Type Field Editor                                                    */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Base definition of the date type field editor.",
	"* @param {{object}} config Configuration information.",
	"*/",
	"{DecIndent}",
"var jsGridDateField = function(config)",
"{",
"{IncIndent}",
	"jsGrid.Field.call(this, config);",
	"{DecIndent}",
"}",
"/**",
"{IncIndent}",
	"* Object definition of the date type field editor.",
	"{DecIndent}",
" */",
"jsGridDateField.prototype = new jsGrid.Field(",
"{",
"{IncIndent}",
	"/**",
	"{IncIndent}",
		"* Text alignment for this editor.",
		"{DecIndent}",
	" */",
	"align: \"center\",    //\\tgeneral property 'align'",
	"/**",
	"{IncIndent}",
		"* Specific CSS reference for this editor.",
		"{DecIndent}",
	" */",
	"css: \"date-field\",\\t\\t// general property 'css'",
	"/**",
	"{IncIndent}",
		"* Return the editing template of for this instance.",
		"* @param {{object}} value Date to edit.",
		"* @returns {{object}} jQuery object for use in editing grid value.",
		"*/",
		"{DecIndent}",
	"editTemplate: function(value)",
	"{",
	"{IncIndent}",
		"var grid = this._grid;",
		"var $result = this._editPicker =",
		"{IncIndent}",
			"$(\"<input>\").datepicker().",
			"datepicker(\"setDate\", getFormattedDate(new Date(value)));",
			"{DecIndent}",
		"$result.on(\"keypress\", function(e)",
		"{",
		"{IncIndent}",
			"if(e.which == 13)",
			"{",
			"{IncIndent}",
				"grid.updateItem();",
				"e.preventDefault;",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"});",
		"$result.on(\"keyup\", function(e)",
		"{",
		"{IncIndent}",
			"if(e.keyCode == 27)",
			"{",
			"{IncIndent}",
				"grid.cancelEdit();",
				"e.stopPropagation();",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"});",
		"return $result;",
		"{DecIndent}",
	"},",
	"/**",
	"{IncIndent}",
		"* Return the final edited value.",
		"* @returns {{string}} Final value edited by the user.",
		"*/",
		"{DecIndent}",
	"editValue: function()",
	"{",
	"{IncIndent}",
		"return this._editPicker.datepicker(\"getDate\").toISOString();",
		"{DecIndent}",
	"},",
	"/**",
	"{IncIndent}",
		"* Return the editor to be used when inserting a new row.",
		"* @param {{object}} value The date to edit.",
		"* @returns {{object}} jQuery object allowing user input.",
		"*/",
		"{DecIndent}",
	"insertTemplate: function(value)",
	"{",
	"{IncIndent}",
		"return this._insertPicker =",
		"{IncIndent}",
			"$(\"<input>\").datepicker({ defaultDate: new Date() });",
			"{DecIndent}",
		"{DecIndent}",
	"},",
	"/**",
	"{IncIndent}",
		"* Return the final edited value.",
		"* @returns {{string}} Final value edited by the user, and ready",
		"* to be inserted into the date field of a new row.",
		"*/",
		"{DecIndent}",
	"insertValue: function()",
	"{",
	"{IncIndent}",
		"return this._insertPicker.datepicker(\"getDate\").toISOString();",
		"{DecIndent}",
	"},",
	"/**",
	"{IncIndent}",
		"* Return the value of the object as a readable, formatted string.",
		"* @param {{object}} value Raw value to be converted to date display.",
		"* @returns {{string}} Value to be displayed directly in the grid cell.",
		"*/",
		"{DecIndent}",
	"itemTemplate: function(value)",
	"{",
	"{IncIndent}",
		"var result = \"\";",
		"if(value)",
		"{",
		"{IncIndent}",
			"result = getFormattedDate(new Date(value));",
			"{DecIndent}",
		"}",
		"return result;",
		"{DecIndent}",
	"},",
	"/**",
	"{IncIndent}",
		"* Return the comparison result between two dates.",
		"* @param {{object}} date1 First date to compare.",
		"* @param {{object}} date2 Next date to compare.",
		"* @returns {{number}} The result of the comparison.",
		"* If > 0, then date1 is larger.",
		"* If == 0, then date1 and date2 are equal.",
		"* If < 0, then date2 is larger.",
		"*/",
		"{DecIndent}",
	"sorter: function(date1, date2)",
	"{",
	"{IncIndent}",
		"return new Date(date1) - new Date(date2);",
		"{DecIndent}",
	"}",
	"{DecIndent}",
"});",
"/**",
"{IncIndent}",
	"* Create the date editor type within the grid.",
	"{DecIndent}",
" */",
"jsGrid.fields.date = jsGridDateField;",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Expression Type Field Editor                                              */",
"/*---------------------------------------------------------------------------*/",
"var jsGridExpressionField = function(config)",
"{",
"{IncIndent}",
	"jsGrid.Field.call(this, config);",
	"{DecIndent}",
"}",
"jsGridExpressionField.prototype = new jsGrid.Field(",
"{",
"{IncIndent}",
	"align: \"left\",    \\t\\t//\\tGeneral property 'align'",
	"css: \"expression-field\",\\t// General property 'css'",
	"expression: \"\",\\t\\t\\t\\t\\t//\\tBy default, the expression is unknown.",
	"itemTemplate: function(value)",
	"{",
	"{IncIndent}",
		"//\\tValue should be set to the record ID.",
		"//\\tIn this version, only implement a very basic expression",
		"//\\tcapability:",
		"//\\t{{FieldName}}\\t-\\tName of a field to display. Multiple field names",
		"//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tare supported, and the same field name can be",
		"//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tspecified multiple times.",
		"//\\t(everything else)\\t-\\tAs shown in the string.",
		"//\\tExample: \"{{LastName}}, {{FirstName}}\"",
		"//\\t\\t\\tDisplay the display name of the person by last name, comma,",
		"//\\t\\t\\tthen first name.",
		"var eValue = \"\";",
		"var grid = this._grid;",
		"var item = null;",
		"var items = grid.data;",
		"var matches = [];",
		"var mCount = 0;",
		"var mIndex = 0;",
		"var mValue = \"\";",
		"var rCount = 0;",
		"var result = \"\";",
		"var rIndex = 0;",
		"var rName = this.name;",
		"var rValue = \"\";",
		"if(this.expression)",
		"{",
		"{IncIndent}",
			"//\\tFind the record first.",
			"rCount = items.length;",
			"// console.log(\"Expression field: rows count: \" + rCount);",
			"// console.log(\"Expression field: value: \" + value);",
			"// console.log(\"Expression field: name:  \" + rName);",
			"for(rIndex = 0; rIndex < rCount; rIndex ++)",
			"{",
			"{IncIndent}",
				"if(items[[rIndex]][[rName]] == value)",
				"{",
				"{IncIndent}",
					"//\\tRecord found.",
					"// console.log(\"Expression field: Record found...\");",
					"item = items[[rIndex]];",
					"break;",
					"{DecIndent}",
				"}",
				"{DecIndent}",
			"}",
			"if(item)",
			"{",
			"{IncIndent}",
				"eValue = this.expression;",
				"matches = eValue.match(/\\{[0-9A-Za-z]+\\}/g);",
				"mCount = matches.length;",
				"for(mIndex = 0; mIndex < mCount; mIndex ++)",
				"{",
				"{IncIndent}",
					"mValue = matches[[mIndex]];",
					"mValue = mValue.substr(1, mValue.length - 2);",
					"// console.log(\"Expression field: Find replacement for \" + mValue);",
					"//\\tGet the replacement value.",
					"rValue = item[[mValue]];",
					"// console.log(\"Expression field: Use \" + rValue);",
					"//\\tReplace all instances of the field.",
					"eValue = eValue.replace(",
					"{IncIndent}",
						"new RegExp(\"\\\\{\" + mValue + \"\\\\}\", \"gm\"), rValue);",
						"{DecIndent}",
					"{DecIndent}",
				"}",
				"result = eValue;",
				"{DecIndent}",
			"}",
			"//\\tFuture reference:",
			"//\\tresult = eval(\"x + 1\");",
			"//\\tif (eval(\" var1 == null && var2 != 5\")) { ... }",
			"// result = (new Function(\"return \" + expression)()) { };",
			"{DecIndent}",
		"}",
		"return result;",
		"{DecIndent}",
	"}",
	"{DecIndent}",
"});",
"jsGrid.fields.expression = jsGridExpressionField;",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Money Type Field Editor                                                   */",
"/*---------------------------------------------------------------------------*/",
"var jsGridMoneyField = function(config)",
"{",
"{IncIndent}",
	"jsGrid.Field.call(this, config);",
	"{DecIndent}",
"}",
"jsGridMoneyField.prototype = new jsGrid.NumberField(",
"{",
"{IncIndent}",
	"//\\tmyCustomProperty: \"foo\",\\t\\t// custom properties can be added",
	"align: \"right\",    \\t//\\tgeneral property 'align'",
	"css: \"money-field\",\\t// general property 'css'",
	"itemTemplate: function(value)",
	"{",
	"{IncIndent}",
		"return (value).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\\t\\t",
		"{DecIndent}",
	"}",
	"{DecIndent}",
"});",
"jsGrid.fields.money = jsGridMoneyField;",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* SelectExpression Type Field Editor                                        */",
"/*---------------------------------------------------------------------------*/",
"var jsGridSelectExpressionField = function(config)",
"{",
"{IncIndent}",
	"jsGrid.Field.call(this, config);",
	"{DecIndent}",
"}",
"jsGridSelectExpressionField.prototype = new jsGrid.SelectField(",
"{",
"{IncIndent}",
	"align: \"left\",    \\t//\\tgeneral property 'align'",
	"css: \"selectexpression-field\",\\t// general property 'css'",
	"createSelectControl: function()",
	"{",
	"{IncIndent}",
		"var $result = $(\"<select>\");",
		"var expression = this.expression;",
		"var items = this.items;",
		"var valueField = this.valueField;",
		"var textField = this.textField;",
		"var rex = this.resolveExpression;",
		"var selectedIndex = this.selectedIndex;",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"$.each(this.items, function(index, item)",
		"{",
		"{IncIndent}",
			"var value = valueField ? item[[valueField]] : index;",
			"// var text = textField ? item[[textField]] : item;",
			"{DecIndent}",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"{IncIndent}",
			"console.log(\"CreateSelectControl: value: \" +",
			"{IncIndent}",
				"value + \" / \" + rex(value, items, valueField, expression));",
				"{DecIndent}",
			"var $option = $(\"<option>\")",
			"{IncIndent}",
				".attr(\"value\", value)",
				".text(rex(value, items, valueField, expression))",
				".appendTo($result);",
				"{DecIndent}",
			"{DecIndent}",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"{IncIndent}",
			"$option.prop(\"selected\", (selectedIndex === index));",
			"{DecIndent}",
		"});",
		"$result.prop(\"disabled\", !!this.readOnly);",
		"return $result;",
		"{DecIndent}",
	"},",
	"editTemplate: function(value)",
	"{",
	"{IncIndent}",
		"if(!this.editing)",
		"{",
		"{IncIndent}",
			"return this.itemTemplate.apply(this, arguments);",
			"{DecIndent}",
		"}",
		"var grid = this._grid;",
		"var $result = this.editControl = this.createSelectControl();",
		"if(value)",
		"{",
		"{IncIndent}",
			"$result.val(value);",
			"{DecIndent}",
		"}",
		"// (value !== undefined) && $result.val(value);",
		"// console.log(\"Wiring keypress for selector.\");",
		"$result.on(\"keypress\", function(e)",
		"{",
		"{IncIndent}",
			"if(e.which == 13)",
			"{",
			"{IncIndent}",
				"// console.log(\"Selector storing changes...\");",
				"grid.updateItem();",
				"e.preventDefault;",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"});",
		"$result.on(\"keyup\", function(e)",
		"{",
		"{IncIndent}",
			"if(e.keyCode == 27)",
			"{",
			"{IncIndent}",
				"// console.log(\"Selector cancelling edit...\");",
				"grid.cancelEdit();",
				"e.stopPropagation();",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"});",
		"return $result;",
		"{DecIndent}",
	"},",
	"expression: \"\",\\t\\t\\t\\t\\t//\\tBy default, the expression is unknown.",
	"itemTemplate: function(value)",
	"{",
	"{IncIndent}",
		"return this.resolveExpression(value,",
		"{IncIndent}",
			"this.items, this.valueField, this.expression);",
			"{DecIndent}",
		"{DecIndent}",
	"},",
	"/**",
	"{IncIndent}",
		"* Resolve the expression for the specified local ID value.",
		"* @param {{object}} value The value designated by the name attribute.",
		"* @param {{object}} items Array of items to inspect.",
		"* @param {{string}} valueField Name of the value field to scan.",
		"* @param {{string}} expression Expression to resolve.",
		"* @returns {{string}} Resolved value.",
		"*/",
		"{DecIndent}",
	"resolveExpression: function(value, items, valueField, expression)",
	"{",
	"{IncIndent}",
		"//\\tValue should be set to the record ID.",
		"//\\tIn this version, only implement a very basic expression",
		"//\\tcapability:",
		"//\\t{{FieldName}}\\t-\\tName of a field to display. Multiple field names",
		"//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tare supported, and the same field name can be",
		"//\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tspecified multiple times.",
		"//\\t(everything else)\\t-\\tAs shown in the string.",
		"//\\tExample: \"{{LastName}}, {{FirstName}}\"",
		"//\\t\\t\\tDisplay the display name of the person by last name, comma,",
		"//\\t\\t\\tthen first name.",
		"var eValue = \"\";",
		"var item = null;",
		"var matches = [];",
		"var mCount = 0;",
		"var mIndex = 0;",
		"var mValue = \"\";",
		"var rCount = 0;",
		"var result = \"\";",
		"var rIndex = 0;",
		"var rName = valueField;",
		"var rValue = \"\";",
		"// console.log(\"SelectExpression...\");",
		"rCount = items.length;",
		"// console.log(\"SelectExpression field: rows count: \" + rCount);",
		"// console.log(\"SelectExpression field: value:      \" + value);",
		"// console.log(\"SelectExpression field: key name:   \" + rName);",
		"if(expression)",
		"{",
		"{IncIndent}",
			"//\\tFind the record first.",
			"for(rIndex = 0; rIndex < rCount; rIndex ++)",
			"{",
			"{IncIndent}",
				"if(items[[rIndex]][[rName]] == value)",
				"{",
				"{IncIndent}",
					"//\\tRecord found.",
					"// console.log(\"SelectExpression field: Record found...\");",
					"item = items[[rIndex]];",
					"break;",
					"{DecIndent}",
				"}",
				"{DecIndent}",
			"}",
			"if(item)",
			"{",
			"{IncIndent}",
				"eValue = expression;",
				"matches = eValue.match(/\\{[0-9A-Za-z]+\\}/g);",
				"mCount = matches.length;",
				"for(mIndex = 0; mIndex < mCount; mIndex ++)",
				"{",
				"{IncIndent}",
					"mValue = matches[[mIndex]];",
					"mValue = mValue.substr(1, mValue.length - 2);",
					"// console.log(\"Expression field: Find replacement for \" + mValue);",
					"//\\tGet the replacement value.",
					"rValue = item[[mValue]];",
					"// console.log(\"Expression field: Use \" + rValue);",
					"//\\tReplace all instances of the field.",
					"eValue = eValue.replace(",
					"{IncIndent}",
						"new RegExp(\"\\\\{\" + mValue + \"\\\\}\", \"gm\"), rValue);",
						"{DecIndent}",
					"{DecIndent}",
				"}",
				"result = eValue;",
				"{DecIndent}",
			"}",
			"//\\tFuture reference:",
			"//\\tresult = eval(\"x + 1\");",
			"//\\tif (eval(\" var1 == null && var2 != 5\")) { ... }",
			"// result = (new Function(\"return \" + expression)()) { };",
			"{DecIndent}",
		"}",
		"return result;",
		"{DecIndent}",
	"},",
	"sorter: function(value1, value2)",
	"{",
	"{IncIndent}",
		"//\\tIn this context, value1 and value2 both enter with values",
		"//\\tset to whatever was found in [field.name].",
		"console.log(\"SelectExpression lookup...\");",
		"var result = 0;",
		"var text1 = this.resolveExpression(value1,",
		"{IncIndent}",
			"this.items, this.valueField, this.expression);",
			"{DecIndent}",
		"var text2 = this.resolveExpression(value2,",
		"{IncIndent}",
			"this.items, this.valueField, this.expression);",
			"{DecIndent}",
		"if(text1 > text2)",
		"{",
		"{IncIndent}",
			"result = 1;",
			"{DecIndent}",
		"}",
		"else if(text1 < text2)",
		"{",
		"{IncIndent}",
			"result = -1;",
			"{DecIndent}",
		"}",
		"return result;",
		"{DecIndent}",
	"}",
	"{DecIndent}",
"});",
"jsGrid.fields.selectexpression = jsGridSelectExpressionField;",
"/*---------------------------------------------------------------------------*/",
"/*****************************************************************************/",
"",
"/*****************************************************************************/",
"/* View -> View Model Wiring                                                 */",
"/*****************************************************************************/",
"$(document).ready(function()",
"{",
"/*---------------------------------------------------------------------------*/",
"/* Column Visibility                                                         */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"$(\".columnVisibility .container input[type=checkbox]\").change(function()",
	"{",
	"{IncIndent}",
		"//\\tColumn Name Pattern: chkcolctlxxxNNNNN",
		"var columnName = $(this).attr(\"id\").substr(12);",
		"var fCount = 0;",
		"var fields = [];",
		"var fIndex = 0;",
		"var fItem = null;",
		"var $grid = null;",
		"//\\tParent Name Pattern: colctlNNNNN",
		"var parentName = $(this).parent().parent().attr(\"id\").substr(6);",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"$grid = $(\"#grd\" + parentName);",
		"console.log(\"Updating column visibility...\");",
		"console.log(\"Parent Name: \" + parentName);",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"//\\tCheck fields for match.",
		"fields = $grid.jsGrid(\"option\", \"fields\");",
		"fCount = fields.length;",
		"console.log(\"Field count: \" + fCount);",
		"for(fIndex = 0; fIndex < fCount; fIndex ++)",
		"{",
		"{IncIndent}",
			"fItem = fields[[fIndex]];",
			"console.log(\"Checking \" + fItem.name)",
			"if(fItem.name == columnName)",
			"{",
			"{IncIndent}",
				"//\\tName matches.",
				"break;",
				"{DecIndent}",
			"}",
			"else if(fItem.title == columnName)",
			"{",
			"{IncIndent}",
				"//\\tSwitch to explicit name.",
				"columnName = fItem.name;",
				"break;",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"}",
		"$grid.jsGrid(\"fieldOption\", columnName,",
		"{IncIndent}",
			"\"visible\", $(this).prop(\"checked\"));",
			"{DecIndent}",
		"{DecIndent}",
	"});",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Row Filtering                                                             */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"$(\".rowFilter input[type=button]\").click(function()",
	"{",
	"{IncIndent}",
		"//\\tButton Name Pattern: btnfiltxxxNNNNN.",
		"var buttonName = $(this).attr(\"id\").substr(10);",
		"var externalFilters = [];",
		"var fields = [];",
		"var $grid = null;",
		"//\\tText Name Pattern: txtfiltxxxNNNNN.",
		"var itemName = \"\";",
		"var itemValue = \"\";",
		"//\\tParent Name Pattern: filtNNNN",
		"var parentName = $(this).parent().attr(\"id\").substr(4);",
		"var $texts = $(this).parent().find(\"label input[type=text]\");",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"$grid = $(\"#grd\" + parentName);",
		"fields = $grid.jsGrid(\"option\", \"fields\");",
		"externalFilters = $grid.jsGrid(\"option\", \"externalFilters\");",
		"if(buttonName == \"Apply\")",
		"{",
		"{IncIndent}",
			"$texts.each(function(tItem)",
			"{",
			"{IncIndent}",
				"itemName = $(this).attr(\"id\").substr(10);",
				"itemValue = $(this).val();",
				"externalFilters[[itemName]] = itemValue;",
				"// console.log(\"External Filtering: \" +",
				"// \\titemName + \"=\" + externalFilters[[itemName]]);",
				"{DecIndent}",
			"});",
			"{DecIndent}",
		"}",
		"else if(buttonName == \"Clear\")",
		"{",
		"{IncIndent}",
			"$texts.each(function(tItem)",
			"{",
			"{IncIndent}",
				"$(this).val(\"\");",
				"itemName = $(this).attr(\"id\").substr(10);",
				"externalFilters[[itemName]] = \"\";",
				"{DecIndent}",
			"});",
			"{DecIndent}",
		"}",
		"//\\tIn this context, search is used to reload the data to the UI.",
		"$grid.jsGrid(\"search\");",
		"{DecIndent}",
	"});",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Expanding Sections                                                        */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"$(\".tabAccordian\").accordion(",
	"{IncIndent}",
		"{ collapsible: true, active: false, heightStyle: \"content\" }",
		"{DecIndent}",
	");",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Tab Pages                                                                 */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"$(\"#tabs\").tabs({",
	"{IncIndent}",
		"activate: function(event, ui)",
		"{",
		"{IncIndent}",
			"switch(ui.newPanel.attr('id'))",
			"{",
			"{IncIndent}",
				"case \"Accounts\":",
				"{IncIndent}",
					"console.log(\"Tab Selected: Accounts...\");",
					"$(\"#grdAccounts\").jsGrid(\"fieldOption\", \"CustomerID\",",
					"{IncIndent}",
						"\"items\", customersViewModel.customers);",
						"{DecIndent}",
					"$(\"#grdAccounts\").jsGrid(\"fieldOption\", \"BranchID\",",
					"{IncIndent}",
						"\"items\", branchesViewModel.branches);",
						"{DecIndent}",
					"$(\"#grdAccounts\").jsGrid(\"fieldOption\", \"EmployeeID\",",
					"{IncIndent}",
						"\"items\", employeesViewModel.employees);",
						"{DecIndent}",
					"$(\"#grdAccounts\").jsGrid(\"refresh\");",
					"break;",
					"{DecIndent}",
				"case \"Branches\":",
				"{IncIndent}",
					"$(\"#grdBranches\").jsGrid(\"refresh\");",
					"{DecIndent}",
				"case \"Customers\":",
				"{IncIndent}",
					"$(\"#grdCustomers\").jsGrid(\"refresh\");",
					"{DecIndent}",
				"case \"Employees\":",
				"{IncIndent}",
					"$(\"#grdEmployees\").jsGrid(\"refresh\");",
					"break;",
					"{DecIndent}",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"}",
		"{DecIndent}",
	"});",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Accounts View                                                             */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"$(\"#grdAccounts\").jsGrid(",
	"{",
	"{IncIndent}",
		"height: \"70vh\",",
		"width: \"100%\",",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"filtering: false,",
		"editing: true,",
		"sorting: true,",
		"paging: true,",
		"autoload: true,",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"pageSize: 4,",
		"pageButtonCount: 5,",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"deleteConfirm: \"Do you really want to delete the account?\",",
		"loadMessage: \"Loading...\",",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"controller: accountsViewModel,",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"fields: [",
		"{IncIndent}",
			"{ name: \"AccountTicket\", type: \"text\", editing: false, width: 150 },",
			"{ name: \"CustomerID\", title: \"Customer\", type: \"select\",",
			"{IncIndent}",
				"items: customersViewModel.customers,",
				"valueField: \"CustomerID\", textField: \"Name\", width: 150 },",
				"{DecIndent}",
			"{ name: \"AccountStatus\", title: \"Account Status\", type: \"select\",",
			"{IncIndent}",
				"items: accountsViewModel.accountStates,",
				"valueField: \"StateName\", textField: \"StateName\" },",
				"{DecIndent}",
			"{ name: \"BalanceAvailable\", title: \"Balance Available\", type: \"money\" },",
			"{ name: \"BalancePending\", title: \"Balance Pending\", type: \"money\" },",
			"{ name: \"DateOpened\", title: \"Date Opened\", type: \"date\" },",
			"{ name: \"DateClosed\", title: \"Date Closed\", type: \"date\" },",
			"{ name: \"DateLastActivity\", title: \"Date Last Activity\", type: \"date\" },",
			"{ name: \"BranchID\", title: \"Branch\", type: \"select\",",
			"{IncIndent}",
				"items: branchesViewModel.branches,",
				"valueField: \"BranchID\", textField: \"Name\" },",
				"{DecIndent}",
			"{ name: \"EmployeeID\", title: \"Employee\", type: \"selectexpression\",",
			"{IncIndent}",
				"items: employeesViewModel.employees, valueField: \"EmployeeID\",",
				"expression: \"{{LastName}}, {{FirstName}}\" },",
				"{DecIndent}",
			"{ type: \"control\" }",
			"{DecIndent}",
		"]",
		"{DecIndent}",
	"});",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Branches View                                                             */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"$(\"#grdBranches\").jsGrid(",
	"{",
	"{IncIndent}",
		"height: \"70vh\",",
		"width: \"100%\",",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"filtering: false,",
		"editing: true,",
		"sorting: true,",
		"paging: true,",
		"autoload: true,",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"pageSize: 4,",
		"pageButtonCount: 5,",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"deleteConfirm: \"Do you really want to delete the branch?\",",
		"loadMessage: \"Loading...\",",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"controller: branchesViewModel,",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"fields:",
		"[",
		"{IncIndent}",
			"{ name: \"BranchTicket\", title: \"Branch Ticket\", type: \"text\",",
			"{IncIndent}",
				"editing: false, width: 150 },",
				"{DecIndent}",
			"{ name: \"Name\", type: \"text\", editing: false },",
			"{ name: \"Address\", type: \"text\" },",
			"{ name: \"City\", type: \"text\" },",
			"{ name: \"State\", type: \"text\" },",
			"{ name: \"ZipCode\", title: \"Zip Code\", type: \"text\" }",
			"{DecIndent}",
		"]",
		"{DecIndent}",
	"});",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Customers View                                                            */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"$(\"#grdCustomers\").jsGrid(",
	"{",
	"{IncIndent}",
		"// height: \"70vh\",",
		"width: \"100%\",",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"filtering: false,",
		"editing: true,",
		"sorting: true,",
		"paging: true,",
		"autoload: true,",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"pageSize: 4,",
		"pageButtonCount: 5,",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"deleteConfirm: \"Do you really want to delete the customer?\",",
		"loadMessage: \"Loading...\",",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"controller: customersViewModel,",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"fields: [",
		"{IncIndent}",
			"{ name: \"CustomerTicket\", type: \"text\", editing: false, width: 150 },",
			"{ name: \"Name\", type: \"text\", width: 150 },",
			"{ name: \"Address\", type: \"text\" },",
			"{ name: \"City\", type: \"text\" },",
			"{ name: \"State\", type: \"text\" },",
			"{ name: \"ZipCode\", type: \"text\" },",
			"{ name: \"TIN\", type: \"text\" },",
			"{ type: \"control\" }",
			"{DecIndent}",
		"]",
		"{DecIndent}",
	"});",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Employees View                                                            */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"$(\"#grdEmployees\").jsGrid(",
	"{",
	"{IncIndent}",
		"height: \"70vh\",",
		"width: \"100%\",",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"filtering: false,",
		"editing: true,",
		"sorting: true,",
		"paging: true,",
		"autoload: true,",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"pageSize: 4,",
		"pageButtonCount: 5,",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"deleteConfirm: \"Do you really want to delete the employee?\",",
		"loadMessage: \"Loading...\",",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"controller: employeesViewModel,",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"fields:",
		"[",
		"{IncIndent}",
			"{ name: \"EmployeeTicket\", title: \"Employee Ticket\", type: \"text\",",
			"{IncIndent}",
				"editing: false, width: 150 },",
				"{DecIndent}",
			"{ name: \"EmployeeID\", title: \"Display Name\", type: \"expression\",",
			"{IncIndent}",
				"expression: \"{{LastName}}, {{FirstName}}\" },",
				"{DecIndent}",
			"{ name: \"Title\", type: \"text\" },",
			"{ name: \"TIN\", type: \"text\" },",
			"{ name: \"DateStarted\", title: \"Date Started\", type: \"date\" },",
			"{ name: \"DateEnded\", title: \"Date Ended\", type: \"date\" }",
			"{DecIndent}",
		"]",
		"{DecIndent}",
	"});",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Get Server Data                                                           */",
"/*---------------------------------------------------------------------------*/",
"loadData();",
"/*---------------------------------------------------------------------------*/",
"});",
"/*****************************************************************************/",
"",
"(function()",
"{",
"/*****************************************************************************/",
"/* View Models                                                               */",
"/*****************************************************************************/",
"/*---------------------------------------------------------------------------*/",
"/* Accounts View Model                                                       */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"var accountsViewModel =",
	"{",
	"{IncIndent}",
		"deleteItem: function(deletedItem)",
		"{",
		"{IncIndent}",
			"var accountIndex = $.inArray(deletedItem, this.accounts);",
			"this.accounts.splice(accountIndex, 1);",
			"{DecIndent}",
		"},",
		"insertItem: function(newItem)",
		"{",
		"{IncIndent}",
			"this.accounts.push(newItem);",
			"{DecIndent}",
		"},",
		"loadData: function(filter)",
		"{",
		"{IncIndent}",
			"console.log(\"accountsDB.loadData...\");",
			"var cCount = this.accounts.length;",
			"var cIndex = 0;",
			"var cItem = null;",
			"var grid = $(\"#grdAccounts\");",
			"var result = this.accounts;",
			"//\\tRemove dashes from tickets.",
			"for(; cIndex < cCount; cIndex ++)",
			"{",
			"{IncIndent}",
				"cItem = this.accounts[[cIndex]];",
				"cItem.AccountTicket =",
				"{IncIndent}",
					"cItem.AccountTicket.replace(/-/g, ' ');",
					"{DecIndent}",
				"{DecIndent}",
			"}",
			"if(grid.jsGrid(\"option\", \"filtering\"))",
			"{",
			"{IncIndent}",
				"//\\tThis leg used when grid filtering is on.",
				"result = $.grep(this.accounts, function(account)",
				"{",
				"{IncIndent}",
					"return (!filter.AccountTicket ||",
					"{IncIndent}",
						"account.AccountTicket.toLowerCase().",
						"indexOf(filter.AccountTicket.toLowerCase()) > -1) &&",
						"(!filter.AccountStatus ||",
						"account.AccountStatus.toLowerCase().",
						"indexOf(filter.AccountStatus.toLowerCase()) > -1);",
						"{DecIndent}",
					"{DecIndent}",
				"});",
				"{DecIndent}",
			"}",
			"else if(grid.jsGrid(\"option\", \"externalFilters\"))",
			"{",
			"{IncIndent}",
				"//\\tThis leg supports external filtering.",
				"var externalFilters = grid.jsGrid(\"option\", \"externalFilters\");",
				"var fCount = 0;",
				"var fields = grid.jsGrid(\"option\", \"fields\");",
				"var filterName = \"\";",
				"var filterValue = \"\";",
				"var fIndex = 0;",
				"var fItem = null;",
				"// var itemTemplate = grid.jsGrid(\"fieldOption\", columnName, \"itemTemplate\");",
				"var itemTemplate = null;",
				"var kCount = 0;",
				"var keys = Object.keys(externalFilters);",
				"var kIndex = 0;",
				"{DecIndent}",
			"{DecIndent}",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"{IncIndent}",
			"{IncIndent}",
				"kCount = keys.length;",
				"fCount = fields.length;",
				"// console.log(\"Account loadData / key count:   \" + kCount);",
				"// console.log(\"Account loadData / field count: \" + fCount);",
				"if(kCount > 0 && fCount > 0)",
				"{",
				"{IncIndent}",
					"for(kIndex = 0; kIndex < kCount; kIndex ++)",
					"{",
					"{IncIndent}",
						"filterName = keys[[kIndex]];",
						"filterValue = externalFilters[[filterName]];",
						"if(filterValue)",
						"{",
						"{IncIndent}",
							"//\\tFilter specified. Get the actual field name.",
							"for(fIndex = 0; fIndex < fCount; fIndex ++)",
							"{",
							"{IncIndent}",
								"if(filterName == fields[[fIndex]].Title)",
								"{",
								"{IncIndent}",
									"//\\tAssign the same search to the filter for the base column.",
									"externalFilters[fields[[fIndex]].name] = filterValue;",
									"break;",
									"{DecIndent}",
								"}",
								"{DecIndent}",
							"}",
							"{DecIndent}",
						"}",
						"{DecIndent}",
					"}",
					"{DecIndent}",
				"{DecIndent}",
			"{DecIndent}",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"{IncIndent}",
			"{IncIndent}",
				"{IncIndent}",
					"//\\tIndirect filtering example.",
					"result = $.grep(this.accounts, function(account)",
					"{",
					"{IncIndent}",
						"var fieldItem = null;",
						"var fieldName = \"\";",
						"var fieldType = \"\";",
						"var filterFunction = \"\";",
						"var filterParts = [];",
						"var gResult = true;",
						"var itemValue = null;",
						"{DecIndent}",
					"{DecIndent}",
				"{DecIndent}",
			"{DecIndent}",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"{IncIndent}",
			"{IncIndent}",
				"{IncIndent}",
					"{IncIndent}",
						"// console.log(\"Checking \" + kCount + \" filters...\");",
						"for(kIndex = 0; kIndex < kCount; kIndex ++)",
						"{",
						"{IncIndent}",
							"filterName = keys[[kIndex]];",
							"console.log(\"Filter: \" + filterName);",
							"filterFunction = \"\";",
							"filterValue = externalFilters[[filterName]];",
							"if(filterName.indexOf(\".\") > -1)",
							"{",
							"{IncIndent}",
								"//\\tAggregate, Range, or Function is in use.",
								"//\\tCurrently, only range is supported.",
								"filterParts = filterName.split(\".\");",
								"filterName = filterParts[0];",
								"filterFunction = filterParts[1].toLowerCase();",
								"{DecIndent}",
							"}",
							"if(filterValue)",
							"{",
							"{IncIndent}",
								"//\\tFilter specified.",
								"fieldName = \"\";",
								"for(fIndex = 0; fIndex < fCount; fIndex ++)",
								"{",
								"{IncIndent}",
									"fieldItem = fields[[fIndex]];",
									"if(fieldItem.name == filterName ||",
									"{IncIndent}",
										"fieldItem.title == filterName)",
										"{DecIndent}",
									"{",
									"{IncIndent}",
										"//\\tField found for filter.",
										"fieldName = fieldItem.name;",
										"itemTemplate = fieldItem.itemTemplate;",
										"if(fieldItem.title == filterName)",
										"{",
										"{IncIndent}",
											"//\\tCopy the filter to the actual field.",
											"externalFilters[[fieldName]] = filterValue;",
											"{DecIndent}",
										"}",
										"break;",
										"{DecIndent}",
									"}",
									"{DecIndent}",
								"}",
								"if(fieldName)",
								"{",
								"{IncIndent}",
									"itemValue = itemTemplate.call(fieldItem, account[[fieldName]]);",
									"// console.log(\"Checking \" + fieldName + \" for \" + itemValue);",
									"if(filterFunction)",
									"{",
									"{IncIndent}",
										"//\\tAggregate, Range, or Function comparison.",
										"//\\tCurrently, only range is supported.",
										"fieldType = fieldItem.type;",
										"switch(filterFunction)",
										"{",
										"{IncIndent}",
											"case \"max\":",
											"{IncIndent}",
												"switch(fieldType)",
												"{",
												"{IncIndent}",
													"case \"checkbox\":",
													"{IncIndent}",
														"if(booleanToNumber(toBoolean(itemValue)) >",
														"{IncIndent}",
															"booleanToNumber(toBoolean(filterValue)))",
															"{DecIndent}",
														"{",
														"{IncIndent}",
															"gResult = false;",
															"{DecIndent}",
														"}",
														"break;",
														"{DecIndent}",
													"case \"date\":",
													"{IncIndent}",
														"if(new Date(itemValue) > new Date(filterValue))",
														"{",
														"{IncIndent}",
															"gResult = false;",
															"{DecIndent}",
														"}",
														"break;",
														"{DecIndent}",
													"case \"money\":",
													"case \"number\":",
													"{IncIndent}",
														"if(toNumber(itemValue) > toNumber(filterValue))",
														"{",
														"{IncIndent}",
															"gResult = false;",
															"{DecIndent}",
														"}",
														"break;",
														"{DecIndent}",
													"case \"select\":",
													"case \"selectexpression\":",
													"case \"text\":",
													"case \"textarea\":",
													"{IncIndent}",
														"if(itemValue > filterValue)",
														"{",
														"{IncIndent}",
															"gResult = false;",
															"{DecIndent}",
														"}",
														"break;",
														"{DecIndent}",
													"{DecIndent}",
												"}",
												"break;",
												"{DecIndent}",
											"case \"min\":",
											"{IncIndent}",
												"switch(fieldType)",
												"{",
												"{IncIndent}",
													"case \"checkbox\":",
													"{IncIndent}",
														"if(booleanToNumber(toBoolean(itemValue)) <",
														"{IncIndent}",
															"booleanToNumber(toBoolean(filterValue)))",
															"{DecIndent}",
														"{",
														"{IncIndent}",
															"gResult = false;",
															"{DecIndent}",
														"}",
														"break;",
														"{DecIndent}",
													"case \"date\":",
													"{IncIndent}",
														"console.log(\"Min Date Filter (\" +",
														"{IncIndent}",
															"itemValue + \" < \" + filterValue + \")?\");",
															"{DecIndent}",
														"if(new Date(itemValue) < new Date(filterValue))",
														"{",
														"{IncIndent}",
															"gResult = false;",
															"{DecIndent}",
														"}",
														"break;",
														"{DecIndent}",
													"case \"money\":",
													"case \"number\":",
													"{IncIndent}",
														"console.log(\"Min Number Filter (\" +",
														"toNumber(itemValue) + \" < \" + toNumber(filterValue) + \")?\");",
														"if(toNumber(itemValue) < toNumber(filterValue))",
														"{",
														"{IncIndent}",
															"gResult = false;",
															"{DecIndent}",
														"}",
														"break;",
														"{DecIndent}",
													"case \"select\":",
													"case \"selectexpression\":",
													"case \"text\":",
													"case \"textarea\":",
													"{IncIndent}",
														"if(itemValue < filterValue)",
														"{",
														"{IncIndent}",
															"gResult = false;",
															"{DecIndent}",
														"}",
														"break;",
														"{DecIndent}",
													"{DecIndent}",
												"}",
												"break;",
												"{DecIndent}",
											"{DecIndent}",
										"}",
										"if(!gResult)",
										"{",
										"{IncIndent}",
											"break;",
											"{DecIndent}",
										"}",
										"{DecIndent}",
									"}",
									"else",
									"{",
									"{IncIndent}",
										"//\\tStraight value comparison.",
										"if(itemValue.toLowerCase().",
										"indexOf(externalFilters[[fieldName]]) < 0)",
										"{",
										"{IncIndent}",
											"// console.log(\"Filter non-match in \" + fieldName);",
											"gResult = false;",
											"break;",
											"{DecIndent}",
										"}",
										"{DecIndent}",
									"}",
									"{DecIndent}",
								"}",
								"{DecIndent}",
							"}",
							"else",
							"{",
							"{IncIndent}",
								"//\\tMake sure that if this filter is empty, any indirectly related",
								"//\\tfilter value is also empty.",
								"fieldName = \"\";",
								"for(fIndex = 0; fIndex < fCount; fIndex ++)",
								"{",
								"{IncIndent}",
									"fieldItem = fields[[fIndex]];",
									"if(fieldItem.title == filterName)",
									"{",
									"{IncIndent}",
										"//\\tField found for filter.",
										"externalFilters[fieldItem.name] = \"\";",
										"break;",
										"{DecIndent}",
									"}",
									"{DecIndent}",
								"}",
								"{DecIndent}",
							"}",
							"{DecIndent}",
						"}",
						"return gResult;",
						"{DecIndent}",
					"});",
					"}",
					"{DecIndent}",
				"{DecIndent}",
			"}",
			"return result;",
			"{DecIndent}",
		"},",
		"updateItem: function(changedItem)",
		"{",
		"}",
		"{DecIndent}",
	"};",
	"window.accountsViewModel = accountsViewModel;",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Branches View Model                                                       */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"var branchesViewModel =",
	"{",
	"{IncIndent}",
		"deleteItem: function(deletedItem)",
		"{",
		"{IncIndent}",
			"var branchIndex = $.inArray(deletedItem, this.branches);",
			"this.branches.splice(branchIndex, 1);",
			"{DecIndent}",
		"},",
		"insertItem: function(newItem)",
		"{",
		"{IncIndent}",
			"this.branches.push(newItem);",
			"{DecIndent}",
		"},",
		"loadData: function(filter)",
		"{",
		"{IncIndent}",
			"console.log(\"branchesDB.loadData...\");",
			"var cCount = this.branches.length;",
			"var cIndex = 0;",
			"var cItem = null;",
			"//\\tRemove dashes from tickets.",
			"for(; cIndex < cCount; cIndex ++)",
			"{",
			"{IncIndent}",
				"cItem = this.branches[[cIndex]];",
				"cItem.BranchTicket =",
				"{IncIndent}",
					"cItem.BranchTicket.replace(/-/g, ' ');",
					"{DecIndent}",
				"{DecIndent}",
			"}",
			"return $.grep(this.branches, function(branch)",
			"{",
			"{IncIndent}",
				"return (!filter.BranchTicket ||",
				"{IncIndent}",
					"branch.BranchTicket.toLowerCase().",
					"indexOf(filter.BranchTicket.toLowerCase()) > -1);",
					"{DecIndent}",
				"{DecIndent}",
			"});",
			"{DecIndent}",
		"},",
		"updateItem: function(changedItem)",
		"{",
		"}",
		"{DecIndent}",
	"};",
	"window.branchesViewModel = branchesViewModel;",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Customers View Model                                                      */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"var customersViewModel =",
	"{",
	"{IncIndent}",
		"deleteItem: function(deletedItem)",
		"{",
		"{IncIndent}",
			"var customerIndex = $.inArray(deletedItem, this.customers);",
			"this.customers.splice(customerIndex, 1);",
			"{DecIndent}",
		"},",
		"insertItem: function(newItem)",
		"{",
		"{IncIndent}",
			"this.customers.push(newItem);",
			"{DecIndent}",
		"},",
		"loadData: function(filter)",
		"{",
		"{IncIndent}",
			"console.log(\"customersDB.loadData...\");",
			"var cCount = this.customers.length;",
			"var cIndex = 0;",
			"var cItem = null;",
			"var grid = $(\"#grdCustomers\");",
			"var result = this.customers;",
			"console.log(\"loadData count: \" + cCount);",
			"for(; cIndex < cCount; cIndex ++)",
			"{",
			"{IncIndent}",
				"cItem = this.customers[[cIndex]];",
				"cItem.CustomerTicket =",
				"{IncIndent}",
					"cItem.CustomerTicket.replace(/-/g, ' ');",
					"{DecIndent}",
				"{DecIndent}",
			"}",
			"if(grid.jsGrid(\"option\", \"filtering\"))",
			"{",
			"{IncIndent}",
				"//\\tSupport for built-in filtering.",
				"result = $.grep(this.customers, function(customer)",
				"{",
				"{IncIndent}",
					"return (!filter.CustomerTicket ||",
					"{IncIndent}",
						"customer.CustomerTicket.toLowerCase().",
						"indexOf(filter.CustomerTicket.toLowerCase()) > -1) &&",
						"(!filter.Name ||",
						"customer.Name.toLowerCase().",
						"indexOf(filter.Name.toLowerCase()) > -1) &&",
						"(!filter.Address ||",
						"customer.Address.toLowerCase().",
						"indexOf(filter.Address.toLowerCase()) > -1) &&",
						"(!filter.City ||",
						"customer.City.toLowerCase().",
						"indexOf(filter.City.toLowerCase()) > -1) &&",
						"(!filter.State ||",
						"customer.State.toLowerCase().",
						"indexOf(filter.State.toLowerCase()) > -1) &&",
						"(!filter.ZipCode ||",
						"customer.ZipCode == filter.ZipCode) &&",
						"(!filter.TIN ||",
						"customer.TIN.indexOf(filter.TIN) > -1);",
						"{DecIndent}",
					"{DecIndent}",
				"});",
				"{DecIndent}",
			"}",
			"else if(grid.jsGrid(\"option\", \"externalFilters\"))",
			"{",
			"{IncIndent}",
				"//\\tSupport for external filters.",
				"var externalFilters = grid.jsGrid(\"option\", \"externalFilters\");",
				"// console.log(\"Customers Grid: Process external filters...\");",
				"result = $.grep(this.customers, function(customer)",
				"{",
				"{IncIndent}",
					"return (!externalFilters.CustomerTicket ||",
					"{IncIndent}",
						"customer.CustomerTicket.toLowerCase().",
						"indexOf(externalFilters.CustomerTicket.toLowerCase()) > -1) &&",
						"(!externalFilters.Name ||",
						"customer.Name.toLowerCase().",
						"indexOf(externalFilters.Name.toLowerCase()) > -1) &&",
						"(!externalFilters.Address ||",
						"customer.Address.toLowerCase().",
						"indexOf(externalFilters.Address.toLowerCase()) > -1) &&",
						"(!externalFilters.City ||",
						"customer.City.toLowerCase().",
						"indexOf(externalFilters.City.toLowerCase()) > -1) &&",
						"(!externalFilters.State ||",
						"customer.State.toLowerCase().",
						"indexOf(externalFilters.State.toLowerCase()) > -1) &&",
						"(!externalFilters.ZipCode ||",
						"customer.ZipCode == externalFilters.ZipCode) &&",
						"(!externalFilters.TIN ||",
						"customer.TIN.indexOf(externalFilters.TIN) > -1);",
						"{DecIndent}",
					"{DecIndent}",
				"});",
				"{DecIndent}",
			"}",
			"return result;",
			"{DecIndent}",
		"},",
		"updateItem: function(changedItem)",
		"{",
		"{IncIndent}",
			"console.log(\"Changed Item ID: \" + changedItem.CustomerID);",
			"var cCount = this.customers.length;",
			"var cIndex = 0;",
			"var cItem = null;",
			"var cName = \"\";",
			"var fCount = 0;",
			"var fIndex = 0;",
			"for(; cIndex < cCount; cIndex ++)",
			"{",
			"{IncIndent}",
				"cItem = this.customers[[cIndex]];",
				"if(cItem.CustomerID == changedItem.CustomerID)",
				"{",
				"{IncIndent}",
					"//\\tChanged item found.",
					"console.log(\"Changed item found...\");",
					"console.log(\"Old Name: \" + cItem.Name);",
					"console.log(\"Changed Name: \" + changedItem.Name);",
					"fCount = Object.keys(changedItem).length;",
					"console.log(\"Field Count: \" + fCount);",
					"for(fIndex = 1; fIndex < fCount; fIndex ++)",
					"{",
					"{IncIndent}",
						"cName = Object.keys(changedItem)[[fIndex]];",
						"cItem[[cName]] = changedItem[[cName]];",
						"{DecIndent}",
					"}",
					"console.log(\"New Name: \" + this.customers[[cIndex]].Name);",
					"{DecIndent}",
				"}",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"}",
		"{DecIndent}",
	"};",
	"window.customersViewModel = customersViewModel;",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Employees View Model                                                      */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"var employeesViewModel =",
	"{",
	"{IncIndent}",
		"deleteItem: function(deletedItem)",
		"{",
		"{IncIndent}",
			"var employeeIndex = $.inArray(deletedItem, this.employees);",
			"this.employees.splice(employeeIndex, 1);",
			"{DecIndent}",
		"},",
		"insertItem: function(newItem)",
		"{",
		"{IncIndent}",
			"this.employees.push(newItem);",
			"{DecIndent}",
		"},",
		"loadData: function(filter)",
		"{",
		"{IncIndent}",
			"console.log(\"employeesDB.loadData...\");",
			"var cCount = this.employees.length;",
			"var cIndex = 0;",
			"var cItem = null;",
			"//\\tRemove dashes from tickets.",
			"for(; cIndex < cCount; cIndex ++)",
			"{",
			"{IncIndent}",
				"cItem = this.employees[[cIndex]];",
				"cItem.EmployeeTicket =",
				"{IncIndent}",
					"cItem.EmployeeTicket.replace(/-/g, ' ');",
					"{DecIndent}",
				"{DecIndent}",
			"}",
			"return $.grep(this.employees, function(employee)",
			"{",
			"{IncIndent}",
				"return (!filter.EmployeeTicket ||",
				"{IncIndent}",
					"employee.EmployeeTicket.toLowerCase().",
					"indexOf(filter.EmployeeTicket.toLowerCase()) > -1);",
					"{DecIndent}",
				"{DecIndent}",
			"});",
			"{DecIndent}",
		"},",
		"updateItem: function(changedItem)",
		"{",
		"}",
		"{DecIndent}",
	"};",
	"window.employeesViewModel = employeesViewModel;",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"/*****************************************************************************/",
"",
"/*****************************************************************************/",
"/* Models                                                                    */",
"/*****************************************************************************/",
"/*---------------------------------------------------------------------------*/",
"/* Account Models                                                            */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"accountsViewModel.accountStates =",
	"[",
	"{IncIndent}",
		"{",
		"{IncIndent}",
			"\"StateName\": \"Active\"",
			"{DecIndent}",
		"},",
		"{",
		"{IncIndent}",
			"\"StateName\": \"Closed\"",
			"{DecIndent}",
		"},",
		"{",
		"{IncIndent}",
			"\"StateName\": \"Pending\"",
			"{DecIndent}",
		"}",
		"{DecIndent}",
	"];",
	"accountsViewModel.accounts = [];",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Branch Models                                                             */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"branchesViewModel.branches = [];",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"/* Customer Models                                                           */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"customersViewModel.customers = [];",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Employee Models                                                           */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"employeesViewModel.employees = [];",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"/*****************************************************************************/",
"}());",
""
]
