[
"/*****************************************************************************/",
"/* Custom Editors                                                            */",
"/*****************************************************************************/",
"/*---------------------------------------------------------------------------*/",
"/* Date Type Field Editor                                                    */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Base definition of the date type field editor.",
	"* @param {{object}} config Configuration information.",
	"*/",
	"{DecIndent}",
"var jsGridDateField = function(config)",
"{",
"{IncIndent}",
	"jsGrid.Field.call(this, config);",
	"{DecIndent}",
"}",
"/**",
"{IncIndent}",
	"* Object definition of the date type field editor.",
	"{DecIndent}",
" */",
"jsGridDateField.prototype = new jsGrid.Field(",
"{",
"{IncIndent}",
	"/**",
	"{IncIndent}",
		"* Text alignment for this editor.",
		"{DecIndent}",
	" */",
	"align: \"center\",    // general property 'align'",
	"/**",
	"{IncIndent}",
		"* Specific CSS reference for this editor.",
		"{DecIndent}",
	" */",
	"css: \"date-field\",  // general property 'css'",
	"/**",
	"{IncIndent}",
		"* Return the editing template of for this instance.",
		"* @param {{object}} value Date to edit.",
		"* @returns {{object}} jQuery object for use in editing grid value.",
		"*/",
		"{DecIndent}",
	"editTemplate: function(value)",
	"{",
	"{IncIndent}",
		"var grid = this._grid;",
		"var $result = this._editPicker =",
		"{IncIndent}",
			"$(\"<input>\").datepicker().",
			"datepicker(\"setDate\", getFormattedDate(new Date(value)));",
			"{DecIndent}",
		"$result.on(\"keypress\", function(e)",
		"{",
		"{IncIndent}",
			"if(e.which == 13)",
			"{",
			"{IncIndent}",
				"grid.updateItem();",
				"e.preventDefault;",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"});",
		"$result.on(\"keyup\", function(e)",
		"{",
		"{IncIndent}",
			"if(e.keyCode == 27)",
			"{",
			"{IncIndent}",
				"grid.cancelEdit();",
				"e.stopPropagation();",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"});",
		"return $result;",
		"{DecIndent}",
	"},",
	"/**",
	"{IncIndent}",
		"* Return the final edited value.",
		"* @returns {{string}} Final value edited by the user.",
		"*/",
		"{DecIndent}",
	"editValue: function()",
	"{",
	"{IncIndent}",
		"return this._editPicker.datepicker(\"getDate\").toISOString();",
		"{DecIndent}",
	"},",
	"/**",
	"{IncIndent}",
		"* Return the editor to be used when inserting a new row.",
		"* @param {{object}} value The date to edit.",
		"* @returns {{object}} jQuery object allowing user input.",
		"*/",
		"{DecIndent}",
	"insertTemplate: function(value)",
	"{",
	"{IncIndent}",
		"return this._insertPicker =",
		"{IncIndent}",
			"$(\"<input>\").datepicker({ defaultDate: new Date() });",
			"{DecIndent}",
		"{DecIndent}",
	"},",
	"/**",
	"{IncIndent}",
		"* Return the final edited value.",
		"* @returns {{string}} Final value edited by the user, and ready",
		"* to be inserted into the date field of a new row.",
		"*/",
		"{DecIndent}",
	"insertValue: function()",
	"{",
	"{IncIndent}",
		"return this._insertPicker.datepicker(\"getDate\").toISOString();",
		"{DecIndent}",
	"},",
	"/**",
	"{IncIndent}",
		"* Return the value of the object as a readable, formatted string.",
		"* @param {{object}} value Raw value to be converted to date display.",
		"* @returns {{string}} Value to be displayed directly in the grid cell.",
		"*/",
		"{DecIndent}",
	"itemTemplate: function(value)",
	"{",
	"{IncIndent}",
		"var result = \"\";",
		"if(value)",
		"{",
		"{IncIndent}",
			"result = getFormattedDate(new Date(value));",
			"{DecIndent}",
		"}",
		"return result;",
		"{DecIndent}",
	"},",
	"/**",
	"{IncIndent}",
		"* Return the comparison result between two dates.",
		"* @param {{object}} date1 First date to compare.",
		"* @param {{object}} date2 Next date to compare.",
		"* @returns {{number}} The result of the comparison.",
		"* If > 0, then date1 is larger.",
		"* If == 0, then date1 and date2 are equal.",
		"* If < 0, then date2 is larger.",
		"*/",
		"{DecIndent}",
	"sorter: function(date1, date2)",
	"{",
	"{IncIndent}",
		"return new Date(date1) - new Date(date2);",
		"{DecIndent}",
	"}",
	"{DecIndent}",
"});",
"/**",
"{IncIndent}",
	"* Create the date editor type within the grid.",
	"{DecIndent}",
" */",
"jsGrid.fields.date = jsGridDateField;",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Expression Type Field Editor                                              */",
"/*---------------------------------------------------------------------------*/",
"var jsGridExpressionField = function(config)",
"{",
"{IncIndent}",
	"jsGrid.Field.call(this, config);",
	"{DecIndent}",
"}",
"jsGridExpressionField.prototype = new jsGrid.Field(",
"{",
"{IncIndent}",
	"align: \"left\",      // General property 'align'",
	"css: \"expression-field\", // General property 'css'",
	"expression: \"\",     // By default, the expression is unknown.",
	"itemTemplate: function(value)",
	"{",
	"{IncIndent}",
		"// Value should be set to the record ID.",
		"// In this version, only implement a very basic expression",
		"// capability:",
		"// {{FieldName}} - Name of a field to display. Multiple field names",
		"//               are supported, and the same field name can be",
		"//               specified multiple times.",
		"// (everything else) - As shown in the string.",
		"// Example: \"{{LastName}}, {{FirstName}}\"",
		"//   Display the display name of the person by last name, comma,",
		"//   then first name.",
		"var eValue = \"\";",
		"var grid = this._grid;",
		"var item = null;",
		"var items = grid.data;",
		"var matches = [];",
		"var mCount = 0;",
		"var mIndex = 0;",
		"var mValue = \"\";",
		"var rCount = 0;",
		"var result = \"\";",
		"var rIndex = 0;",
		"var rName = this.name;",
		"var rValue = \"\";",
		"if(this.expression)",
		"{",
		"{IncIndent}",
			"// Find the record first.",
			"rCount = items.length;",
			"// console.log(\"Expression field: rows count: \" + rCount);",
			"// console.log(\"Expression field: value: \" + value);",
			"// console.log(\"Expression field: name:  \" + rName);",
			"for(rIndex = 0; rIndex < rCount; rIndex ++)",
			"{",
			"{IncIndent}",
				"if(items[[rIndex]][[rName]] == value)",
				"{",
				"{IncIndent}",
					"// Record found.",
					"// console.log(\"Expression field: Record found...\");",
					"item = items[[rIndex]];",
					"break;",
					"{DecIndent}",
				"}",
				"{DecIndent}",
			"}",
			"if(item)",
			"{",
			"{IncIndent}",
				"eValue = this.expression;",
				"matches = eValue.match(/\\{[0-9A-Za-z]+\\}/g);",
				"mCount = matches.length;",
				"for(mIndex = 0; mIndex < mCount; mIndex ++)",
				"{",
				"{IncIndent}",
					"mValue = matches[[mIndex]];",
					"mValue = mValue.substr(1, mValue.length - 2);",
					"// console.log(\"Expression field: Find replacement for \" + mValue);",
					"// Get the replacement value.",
					"rValue = item[[mValue]];",
					"// console.log(\"Expression field: Use \" + rValue);",
					"// Replace all instances of the field.",
					"eValue = eValue.replace(",
					"{IncIndent}",
						"new RegExp(\"\\\\{\" + mValue + \"\\\\}\", \"gm\"), rValue);",
						"{DecIndent}",
					"{DecIndent}",
				"}",
				"result = eValue;",
				"{DecIndent}",
			"}",
			"// Future reference:",
			"// result = eval(\"x + 1\");",
			"// if (eval(\" var1 == null && var2 != 5\")) { ... }",
			"// result = (new Function(\"return \" + expression)()) { };",
			"{DecIndent}",
		"}",
		"return result;",
		"{DecIndent}",
	"}",
	"{DecIndent}",
"});",
"jsGrid.fields.expression = jsGridExpressionField;",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Money Type Field Editor                                                   */",
"/*---------------------------------------------------------------------------*/",
"var jsGridMoneyField = function(config)",
"{",
"{IncIndent}",
	"jsGrid.Field.call(this, config);",
	"{DecIndent}",
"}",
"jsGridMoneyField.prototype = new jsGrid.NumberField(",
"{",
"{IncIndent}",
	"// myCustomProperty: \"foo\",  // custom properties can be added",
	"align: \"right\",     // general property 'align'",
	"css: \"money-field\", // general property 'css'",
	"itemTemplate: function(value)",
	"{",
	"{IncIndent}",
		"return (value).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');  ",
		"{DecIndent}",
	"}",
	"{DecIndent}",
"});",
"jsGrid.fields.money = jsGridMoneyField;",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* SelectExpression Type Field Editor                                        */",
"/*---------------------------------------------------------------------------*/",
"var jsGridSelectExpressionField = function(config)",
"{",
"{IncIndent}",
	"jsGrid.Field.call(this, config);",
	"{DecIndent}",
"}",
"jsGridSelectExpressionField.prototype = new jsGrid.SelectField(",
"{",
"{IncIndent}",
	"align: \"left\",     // general property 'align'",
	"css: \"selectexpression-field\", // general property 'css'",
	"createSelectControl: function()",
	"{",
	"{IncIndent}",
		"var $result = $(\"<select>\");",
		"var expression = this.expression;",
		"var items = this.items;",
		"var valueField = this.valueField;",
		"var textField = this.textField;",
		"var rex = this.resolveExpression;",
		"var selectedIndex = this.selectedIndex;",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"$.each(this.items, function(index, item)",
		"{",
		"{IncIndent}",
			"var value = valueField ? item[[valueField]] : index;",
			"// var text = textField ? item[[textField]] : item;",
			"{DecIndent}",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"{IncIndent}",
			"console.log(\"CreateSelectControl: value: \" +",
			"{IncIndent}",
				"value + \" / \" + rex(value, items, valueField, expression));",
				"{DecIndent}",
			"var $option = $(\"<option>\")",
			"{IncIndent}",
				".attr(\"value\", value)",
				".text(rex(value, items, valueField, expression))",
				".appendTo($result);",
				"{DecIndent}",
			"{DecIndent}",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"{IncIndent}",
			"$option.prop(\"selected\", (selectedIndex === index));",
			"{DecIndent}",
		"});",
		"$result.prop(\"disabled\", !!this.readOnly);",
		"return $result;",
		"{DecIndent}",
	"},",
	"editTemplate: function(value)",
	"{",
	"{IncIndent}",
		"if(!this.editing)",
		"{",
		"{IncIndent}",
			"return this.itemTemplate.apply(this, arguments);",
			"{DecIndent}",
		"}",
		"var grid = this._grid;",
		"var $result = this.editControl = this.createSelectControl();",
		"if(value)",
		"{",
		"{IncIndent}",
			"$result.val(value);",
			"{DecIndent}",
		"}",
		"// (value !== undefined) && $result.val(value);",
		"// console.log(\"Wiring keypress for selector.\");",
		"$result.on(\"keypress\", function(e)",
		"{",
		"{IncIndent}",
			"if(e.which == 13)",
			"{",
			"{IncIndent}",
				"// console.log(\"Selector storing changes...\");",
				"grid.updateItem();",
				"e.preventDefault;",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"});",
		"$result.on(\"keyup\", function(e)",
		"{",
		"{IncIndent}",
			"if(e.keyCode == 27)",
			"{",
			"{IncIndent}",
				"// console.log(\"Selector cancelling edit...\");",
				"grid.cancelEdit();",
				"e.stopPropagation();",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"});",
		"return $result;",
		"{DecIndent}",
	"},",
	"expression: \"\",     // By default, the expression is unknown.",
	"itemTemplate: function(value)",
	"{",
	"{IncIndent}",
		"return this.resolveExpression(value,",
		"{IncIndent}",
			"this.items, this.valueField, this.expression);",
			"{DecIndent}",
		"{DecIndent}",
	"},",
	"/**",
	"{IncIndent}",
		"* Resolve the expression for the specified local ID value.",
		"* @param {{object}} value The value designated by the name attribute.",
		"* @param {{object}} items Array of items to inspect.",
		"* @param {{string}} valueField Name of the value field to scan.",
		"* @param {{string}} expression Expression to resolve.",
		"* @returns {{string}} Resolved value.",
		"*/",
		"{DecIndent}",
	"resolveExpression: function(value, items, valueField, expression)",
	"{",
	"{IncIndent}",
		"// Value should be set to the record ID.",
		"// In this version, only implement a very basic expression",
		"// capability:",
		"// {{FieldName}} - Name of a field to display. Multiple field names",
		"//               are supported, and the same field name can be",
		"//               specified multiple times.",
		"// (everything else) - As shown in the string.",
		"// Example: \"{{LastName}}, {{FirstName}}\"",
		"//   Display the display name of the person by last name, comma,",
		"//   then first name.",
		"var eValue = \"\";",
		"var item = null;",
		"var matches = [];",
		"var mCount = 0;",
		"var mIndex = 0;",
		"var mValue = \"\";",
		"var rCount = 0;",
		"var result = \"\";",
		"var rIndex = 0;",
		"var rName = valueField;",
		"var rValue = \"\";",
		"// console.log(\"SelectExpression...\");",
		"rCount = items.length;",
		"// console.log(\"SelectExpression field: rows count: \" + rCount);",
		"// console.log(\"SelectExpression field: value:      \" + value);",
		"// console.log(\"SelectExpression field: key name:   \" + rName);",
		"if(expression)",
		"{",
		"{IncIndent}",
			"// Find the record first.",
			"for(rIndex = 0; rIndex < rCount; rIndex ++)",
			"{",
			"{IncIndent}",
				"if(items[[rIndex]][[rName]] == value)",
				"{",
				"{IncIndent}",
					"// Record found.",
					"// console.log(\"SelectExpression field: Record found...\");",
					"item = items[[rIndex]];",
					"break;",
					"{DecIndent}",
				"}",
				"{DecIndent}",
			"}",
			"if(item)",
			"{",
			"{IncIndent}",
				"eValue = expression;",
				"matches = eValue.match(/\\{[0-9A-Za-z]+\\}/g);",
				"mCount = matches.length;",
				"for(mIndex = 0; mIndex < mCount; mIndex ++)",
				"{",
				"{IncIndent}",
					"mValue = matches[[mIndex]];",
					"mValue = mValue.substr(1, mValue.length - 2);",
					"// console.log(\"Expression field: Find replacement for \" + mValue);",
					"// Get the replacement value.",
					"rValue = item[[mValue]];",
					"// console.log(\"Expression field: Use \" + rValue);",
					"// Replace all instances of the field.",
					"eValue = eValue.replace(",
					"{IncIndent}",
						"new RegExp(\"\\\\{\" + mValue + \"\\\\}\", \"gm\"), rValue);",
						"{DecIndent}",
					"{DecIndent}",
				"}",
				"result = eValue;",
				"{DecIndent}",
			"}",
			"// Future reference:",
			"// result = eval(\"x + 1\");",
			"// if (eval(\" var1 == null && var2 != 5\")) { ... }",
			"// result = (new Function(\"return \" + expression)()) { };",
			"{DecIndent}",
		"}",
		"return result;",
		"{DecIndent}",
	"},",
	"sorter: function(value1, value2)",
	"{",
	"{IncIndent}",
		"// In this context, value1 and value2 both enter with values",
		"// set to whatever was found in [field.name].",
		"console.log(\"SelectExpression lookup...\");",
		"var result = 0;",
		"var text1 = this.resolveExpression(value1,",
		"{IncIndent}",
			"this.items, this.valueField, this.expression);",
			"{DecIndent}",
		"var text2 = this.resolveExpression(value2,",
		"{IncIndent}",
			"this.items, this.valueField, this.expression);",
			"{DecIndent}",
		"if(text1 > text2)",
		"{",
		"{IncIndent}",
			"result = 1;",
			"{DecIndent}",
		"}",
		"else if(text1 < text2)",
		"{",
		"{IncIndent}",
			"result = -1;",
			"{DecIndent}",
		"}",
		"return result;",
		"{DecIndent}",
	"}",
	"{DecIndent}",
"});",
"jsGrid.fields.selectexpression = jsGridSelectExpressionField;",
"/*---------------------------------------------------------------------------*/",
"/*****************************************************************************/",
""
]
