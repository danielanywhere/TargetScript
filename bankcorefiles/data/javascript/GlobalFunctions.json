[
"/*****************************************************************************/",
"/* Global Functions and Values                                               */",
"/*****************************************************************************/",
"/*---------------------------------------------------------------------------*/",
"/* booleanToNumber                                                           */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Return a 1 or 0 number value corresponding to the caller's input.",
	"* @param {{boolean}} value Boolean value to inspect.",
	"* @returns {{number}} 1 or 0 representation of the caller's value.",
	"*/",
	"{DecIndent}",
"function booleanToNumber(value)",
"{",
"{IncIndent}",
	"return (value ? 1 : 0);",
	"{DecIndent}",
"}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* getFormattedDate                                                          */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Return the user-readable version of a date.",
	"* @param {{object}} date The date to convert to printable.",
	"* @returns {{string}} The caller's date, formatted for MM/DD/YYYY.",
	"*/",
	"{DecIndent}",
"function getFormattedDate(date)",
"{",
" var day = date.getDate().toString();",
" var month = (1 + date.getMonth()).toString();",
"{IncIndent}",
	"var result = \"\";",
	"{DecIndent}",
" var year = date.getFullYear();",
"",
" month = month.length > 1 ? month : '0' + month;",
" day = day.length > 1 ? day : '0' + day;",
"",
"{IncIndent}",
	"result = month + '/' + day + '/' + year;",
	"if(result == \"12/31/1969\")",
	"{",
	"{IncIndent}",
		"result = \"\";",
		"{DecIndent}",
	"}",
	"return result;",
	"{DecIndent}",
"}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* loadData                                                                  */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Load the server data and populate the local tables.",
	"*/",
	"{DecIndent}",
"function loadData()",
"{",
"{IncIndent}",
	"var data = null;",
	"var reply = \"\";",
	"{DecIndent}",
"",
"{IncIndent}",
	"$(\".jsGrid\").jsGrid(\"_showLoading\");",
	"$.ajax({",
	"{IncIndent}",
		"type: \"GET\",",
		"url: \"/indexdata\",",
		"success: loadDataSuccess,",
		"complete: loadDataComplete",
		"{DecIndent}",
	"});",
	"{DecIndent}",
"}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* loadDataComplete                                                          */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Called when the data load operation has completed.",
	"* @param {{object}} jqXHR Equivalent of the XMLHttpRequest object.",
	"* @param {{string}} status Status message of the operation.",
	"*/",
	"{DecIndent}",
"function loadDataComplete(jqXHR, status)",
"{",
"{IncIndent}",
	"$(\".jsGrid\").jsGrid(\"_hideLoading\");",
	"{DecIndent}",
"}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* loadDataSuccess                                                           */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Called when the data load operation has successfully received data from the",
	"* server.",
	"* @param {{object}} result Data received from the server. If everything went as",
	"* expected, the format will already be JSON.",
	"*/",
	"{DecIndent}",
"function loadDataSuccess(result)",
"{",
"{IncIndent}",
	"var rCount = 0;",
	"var rIndex = 0;",
	"var target = null;",
	"var tCount = result.length;",
	"var tIndex = 0;",
	"var tItem = null;",
	"console.log(\"loadData: received \" + tCount + \" tables...\");",
	"for(tIndex = 0; tIndex < tCount; tIndex ++)",
	"{",
	"{IncIndent}",
		"tItem = result[[tIndex]];",
		"console.log(\"Set \" + tItem.Name + \" data / record count: \" + tItem.Table.length);",
		"target = null;",
		"switch(tItem.Name)",
		"{",
		"{IncIndent}",
			"case \"Accounts\":",
			"{IncIndent}",
				"target = accountsViewModel.accounts;",
				"break;",
				"{DecIndent}",
			"case \"Branches\":",
			"{IncIndent}",
				"target = branchesViewModel.branches;",
				"break;",
				"{DecIndent}",
			"case \"Customers\":",
			"{IncIndent}",
				"target = customersViewModel.customers;",
				"break;",
				"{DecIndent}",
			"case \"Employees\":",
			"{IncIndent}",
				"target = employeesViewModel.employees;",
				"break;",
				"{DecIndent}",
			"{DecIndent}",
		"}",
		"if(target)",
		"{",
		"{IncIndent}",
			"target.length = 0;",
			"rCount = tItem.Table.length;",
			"for(rIndex = 0; rIndex < rCount; rIndex ++)",
			"{",
			"{IncIndent}",
				"// console.log(\" adding record \" + rIndex);",
				"target.push(tItem.Table[[rIndex]]);",
				"{DecIndent}",
			"}",
			"$(\"#grd\" + tItem.Name).jsGrid(\"loadData\");",
			"$(\"#grd\" + tItem.Name).jsGrid(\"refresh\");",
			"{DecIndent}",
		"}",
		"{DecIndent}",
	"}",
	"{DecIndent}",
"}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* toBoolean                                                                 */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Return a value indicating whether the caller's parameter evaluates to",
	"* true or false.",
	"* @param {{object}} value Value to inspect for boolean outcome.",
	"* @returns {{boolean}} Boolean representation of the caller's value.",
	"*/",
	"{DecIndent}",
"function toBoolean(value)",
"{",
"{IncIndent}",
	"var result = false;",
	"if(typeof(value) === \"string\")",
	"{",
	"{IncIndent}",
		"value = value.trim().toLocaleLowerCase();",
		"{DecIndent}",
	"}",
	"switch(value)",
	"{",
	"{IncIndent}",
		"case true:",
		"case \"true\":",
		"case 1:",
		"case \"1\":",
		"case \"on\":",
		"case \"yes\":",
		"{IncIndent}",
			"result = true;",
			"break;",
			"{DecIndent}",
		"{DecIndent}",
	"}",
	"return result;",
	"{DecIndent}",
"}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* toNumber                                                                  */",
"/*---------------------------------------------------------------------------*/",
"/**",
"{IncIndent}",
	"* Return a numeric representation of the caller's value.",
	"* @param {{string}} value Value to convert to number.",
	"* @returns {{number}} Numeric representation of the caller's value.",
	"*/",
	"function toNumber(value)",
	"{",
	"{IncIndent}",
		"value = value.replace(/[\\$, ]/g, \"\");",
		"return parseFloat(value);",
		"{DecIndent}",
	"}",
	"/*---------------------------------------------------------------------------*/",
	"",
	"{DecIndent}"
]
