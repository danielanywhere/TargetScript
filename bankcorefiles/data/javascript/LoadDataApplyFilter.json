[
"if(grid.jsGrid(\"option\", \"filtering\"))",
"{",
"{IncIndent}",
	"// Support for internal filtering.",
	"// This leg used when grid filtering is on.",
	"result = $.grep(this.{Lower({Plural({ObjectName})})}, function({Lower({ObjectName})})",
	"{",
	"{IncIndent}",
		"{IncIndent}",
			"{LoopStart(name:internalFieldFilter;level:entry;expression:[GridItemEditor]=text)}",
			"{ConditionStart(name:internalFieldFilterPFirst;expression:{isFirst})}",
			"{DecIndent}",
		"return (!filter.[Name] ||",
		"{IncIndent}",
			"{ConditionEnd(name:internalFieldFilterPFirst)}",
			"{ConditionStart(name:internalFieldFilterP;expression:NOT {isFirst})}",
			"(!filter.[Name] ||",
			"{ConditionEnd(name:internalFieldFilterP)}",
			"{lower}.[Name].toLowerCase().",
			"indexOf(filter.[Name].toLowerCase()) > -1){IIF(NOT {isLast}, &&,;)}",
			"{LoopEnd(name:internalFieldFilter)}",
			"{DecIndent}",
		"{DecIndent}",
	"});",
	"{DecIndent}",
"}",
"else if(grid.jsGrid(\"option\", \"externalFilters\"))",
"{",
"{IncIndent}",
	"// This leg supports external filtering.",
	"var externalFilters = grid.jsGrid(\"option\", \"externalFilters\");",
	"var fCount = 0;",
	"var fields = grid.jsGrid(\"option\", \"fields\");",
	"var filterName = \"\";",
	"var filterValue = \"\";",
	"var fIndex = 0;",
	"var fItem = null;",
	"var itemTemplate = null;",
	"var kCount = 0;",
	"var keys = Object.keys(externalFilters);",
	"var kIndex = 0;",
	"",
	"kCount = keys.length;",
	"fCount = fields.length;",
	"// console.log(\"{ObjectName} loadData / key count:   \" + kCount);",
	"// console.log(\"{ObjectName} loadData / field count: \" + fCount);",
	"if(kCount > 0 && fCount > 0)",
	"{",
	"{IncIndent}",
		"for(kIndex = 0; kIndex < kCount; kIndex ++)",
		"{",
		"{IncIndent}",
			"filterName = keys[[kIndex]];",
			"filterValue = externalFilters[[filterName]];",
			"if(filterValue)",
			"{",
			"{IncIndent}",
				"// Filter specified. Get the actual field name.",
				"for(fIndex = 0; fIndex < fCount; fIndex ++)",
				"{",
				"{IncIndent}",
					"if(filterName == fields[[fIndex]].Title)",
					"{",
					"{IncIndent}",
						"// Assign the same search to the filter for the base column.",
						"externalFilters[fields[[fIndex]].name] = filterValue;",
						"break;",
						"{DecIndent}",
					"}",
					"{DecIndent}",
				"}",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"}",
		"",
		"// Indirect filtering example.",
		"result = $.grep(this.{Plural({Lower({ObjectName})})}, function({Lower({ObjectName})})",
		"{",
		"{IncIndent}",
			"var fieldItem = null;",
			"var fieldName = \"\";",
			"var fieldType = \"\";",
			"var filterFunction = \"\";",
			"var filterParts = [];",
			"var gResult = true;",
			"var itemValue = null;",
			"",
			"// console.log(\"Checking \" + kCount + \" filters...\");",
			"for(kIndex = 0; kIndex < kCount; kIndex ++)",
			"{",
			"{IncIndent}",
				"filterName = keys[[kIndex]];",
				"console.log(\"Filter: \" + filterName);",
				"filterFunction = \"\";",
				"filterValue = externalFilters[[filterName]];",
				"if(filterName.indexOf(\".\") > -1)",
				"{",
				"{IncIndent}",
					"// Aggregate, Range, or Function is in use.",
					"// Currently, only range is supported.",
					"filterParts = filterName.split(\".\");",
					"filterName = filterParts[0];",
					"filterFunction = filterParts[1].toLowerCase();",
					"{DecIndent}",
				"}",
				"if(filterValue)",
				"{",
				"{IncIndent}",
					"// Filter specified.",
					"fieldName = \"\";",
					"for(fIndex = 0; fIndex < fCount; fIndex ++)",
					"{",
					"{IncIndent}",
						"fieldItem = fields[[fIndex]];",
						"if(fieldItem.name == filterName ||",
						"{IncIndent}",
							"fieldItem.title == filterName)",
							"{DecIndent}",
						"{",
						"{IncIndent}",
							"// Field found for filter.",
							"fieldName = fieldItem.name;",
							"itemTemplate = fieldItem.itemTemplate;",
							"if(fieldItem.title == filterName)",
							"{",
							"{IncIndent}",
								"// Copy the filter to the actual field.",
								"externalFilters[[fieldName]] = filterValue;",
								"{DecIndent}",
							"}",
							"break;",
							"{DecIndent}",
						"}",
						"{DecIndent}",
					"}",
					"if(fieldName)",
					"{",
					"{IncIndent}",
						"itemValue = itemTemplate.call(fieldItem, account[[fieldName]]);",
						"// console.log(\"Checking \" + fieldName + \" for \" + itemValue);",
						"if(filterFunction)",
						"{",
						"{IncIndent}",
							"// Aggregate, Range, or Function comparison.",
							"// Currently, only range is supported.",
							"fieldType = fieldItem.type;",
							"switch(filterFunction)",
							"{",
							"{IncIndent}",
								"case \"max\":",
								"{IncIndent}",
									"switch(fieldType)",
									"{",
									"{IncIndent}",
										"case \"checkbox\":",
										"{IncIndent}",
											"if(booleanToNumber(toBoolean(itemValue)) >",
											"{IncIndent}",
												"booleanToNumber(toBoolean(filterValue)))",
												"{DecIndent}",
											"{",
											"{IncIndent}",
												"gResult = false;",
												"{DecIndent}",
											"}",
											"break;",
											"{DecIndent}",
										"case \"date\":",
										"{IncIndent}",
											"if(new Date(itemValue) > new Date(filterValue))",
											"{",
											"{IncIndent}",
												"gResult = false;",
												"{DecIndent}",
											"}",
											"break;",
											"{DecIndent}",
										"case \"money\":",
										"case \"number\":",
										"{IncIndent}",
											"if(toNumber(itemValue) > toNumber(filterValue))",
											"{",
											"{IncIndent}",
												"gResult = false;",
												"{DecIndent}",
											"}",
											"break;",
											"{DecIndent}",
										"case \"select\":",
										"case \"selectexpression\":",
										"case \"text\":",
										"case \"textarea\":",
										"{IncIndent}",
											"if(itemValue > filterValue)",
											"{",
											"{IncIndent}",
												"gResult = false;",
												"{DecIndent}",
											"}",
											"break;",
											"{DecIndent}",
										"{DecIndent}",
									"}",
									"break;",
									"{DecIndent}",
								"case \"min\":",
								"{IncIndent}",
									"switch(fieldType)",
									"{",
									"{IncIndent}",
										"case \"checkbox\":",
										"{IncIndent}",
											"if(booleanToNumber(toBoolean(itemValue)) <",
											"{IncIndent}",
												"booleanToNumber(toBoolean(filterValue)))",
												"{DecIndent}",
											"{",
											"{IncIndent}",
												"gResult = false;",
												"{DecIndent}",
											"}",
											"break;",
											"{DecIndent}",
										"case \"date\":",
										"{IncIndent}",
											"console.log(\"Min Date Filter (\" +",
											"{IncIndent}",
												"itemValue + \" < \" + filterValue + \")?\");",
												"{DecIndent}",
											"if(new Date(itemValue) < new Date(filterValue))",
											"{",
											"{IncIndent}",
												"gResult = false;",
												"{DecIndent}",
											"}",
											"break;",
											"{DecIndent}",
										"case \"money\":",
										"case \"number\":",
										"{IncIndent}",
											"console.log(\"Min Number Filter (\" +",
											"toNumber(itemValue) + \" < \" + toNumber(filterValue) + \")?\");",
											"if(toNumber(itemValue) < toNumber(filterValue))",
											"{",
											"{IncIndent}",
												"gResult = false;",
												"{DecIndent}",
											"}",
											"break;",
											"{DecIndent}",
										"case \"select\":",
										"case \"selectexpression\":",
										"case \"text\":",
										"case \"textarea\":",
										"{IncIndent}",
											"if(itemValue < filterValue)",
											"{",
											"{IncIndent}",
												"gResult = false;",
												"{DecIndent}",
											"}",
											"break;",
											"{DecIndent}",
										"{DecIndent}",
									"}",
									"break;",
									"{DecIndent}",
								"{DecIndent}",
							"}",
							"if(!gResult)",
							"{",
							"{IncIndent}",
								"break;",
								"{DecIndent}",
							"}",
							"{DecIndent}",
						"}",
						"else",
						"{",
						"{IncIndent}",
							"// Straight value comparison.",
							"if(itemValue.toLowerCase().",
							"indexOf(externalFilters[[fieldName]]) < 0)",
							"{",
							"{IncIndent}",
								"// console.log(\"Filter non-match in \" + fieldName);",
								"gResult = false;",
								"break;",
								"{DecIndent}",
							"}",
							"{DecIndent}",
						"}",
						"{DecIndent}",
					"}",
					"{DecIndent}",
				"}",
				"else",
				"{",
				"{IncIndent}",
					"// Make sure that if this filter is empty, any indirectly related",
					"// filter value is also empty.",
					"fieldName = \"\";",
					"for(fIndex = 0; fIndex < fCount; fIndex ++)",
					"{",
					"{IncIndent}",
						"fieldItem = fields[[fIndex]];",
						"if(fieldItem.title == filterName)",
						"{",
						"{IncIndent}",
							"// Field found for filter.",
							"externalFilters[fieldItem.name] = \"\";",
							"break;",
							"{DecIndent}",
						"}",
						"{DecIndent}",
					"}",
					"{DecIndent}",
				"}",
				"{DecIndent}",
			"}",
			"return gResult;",
			"{DecIndent}",
		"});",
		"}",
		"{DecIndent}",
	"{DecIndent}",
"}"
]
