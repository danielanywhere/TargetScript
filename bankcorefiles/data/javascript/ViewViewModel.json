[
"/*****************************************************************************/",
"/* View -> View Model Wiring                                                 */",
"/*****************************************************************************/",
"/*---------------------------------------------------------------------------*/",
"/* Column Visibility                                                         */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"$(\".columnVisibility .container input[type=checkbox]\").change(function()",
	"{",
	"{IncIndent}",
		"// Column Name Pattern: chkcolctlxxxNNNNN",
		"var columnName = $(this).attr(\"id\").substr(12);",
		"var fCount = 0;",
		"var fields = [];",
		"var fIndex = 0;",
		"var fItem = null;",
		"var $grid = null;",
		"// Parent Name Pattern: colctlNNNNN",
		"var parentName = $(this).parent().parent().attr(\"id\").substr(6);",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"$grid = $(\"#grd\" + parentName);",
		"console.log(\"Updating column visibility...\");",
		"console.log(\"Parent Name: \" + parentName);",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"// Check fields for match.",
		"fields = $grid.jsGrid(\"option\", \"fields\");",
		"fCount = fields.length;",
		"console.log(\"Field count: \" + fCount);",
		"for(fIndex = 0; fIndex < fCount; fIndex ++)",
		"{",
		"{IncIndent}",
			"fItem = fields[[fIndex]];",
			"console.log(\"Checking \" + fItem.name)",
			"if(fItem.name == columnName)",
			"{",
			"{IncIndent}",
				"// Name matches.",
				"break;",
				"{DecIndent}",
			"}",
			"else if(fItem.title == columnName)",
			"{",
			"{IncIndent}",
				"// Switch to explicit name.",
				"columnName = fItem.name;",
				"break;",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"}",
		"$grid.jsGrid(\"fieldOption\", columnName,",
		"{IncIndent}",
			"\"visible\", $(this).prop(\"checked\"));",
			"{DecIndent}",
		"{DecIndent}",
	"});",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Row Filtering                                                             */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"$(\".rowFilter input[type=button]\").click(function()",
	"{",
	"{IncIndent}",
		"// Button Name Pattern: btnfiltxxxNNNNN.",
		"var buttonName = $(this).attr(\"id\").substr(10);",
		"var externalFilters = [];",
		"var fields = [];",
		"var $grid = null;",
		"// Text Name Pattern: txtfiltxxxNNNNN.",
		"var itemName = \"\";",
		"var itemValue = \"\";",
		"// Parent Name Pattern: filtNNNN",
		"var parentName = $(this).parent().attr(\"id\").substr(4);",
		"var $texts = $(this).parent().find(\"label input[type=text]\");",
		"{DecIndent}",
	"{DecIndent}",
"",
"{IncIndent}",
	"{IncIndent}",
		"$grid = $(\"#grd\" + parentName);",
		"fields = $grid.jsGrid(\"option\", \"fields\");",
		"externalFilters = $grid.jsGrid(\"option\", \"externalFilters\");",
		"if(buttonName == \"Apply\")",
		"{",
		"{IncIndent}",
			"$texts.each(function(tItem)",
			"{",
			"{IncIndent}",
				"itemName = $(this).attr(\"id\").substr(10);",
				"itemValue = $(this).val();",
				"externalFilters[[itemName]] = itemValue;",
				"// console.log(\"External Filtering: \" +",
				"//  itemName + \"=\" + externalFilters[[itemName]]);",
				"{DecIndent}",
			"});",
			"{DecIndent}",
		"}",
		"else if(buttonName == \"Clear\")",
		"{",
		"{IncIndent}",
			"$texts.each(function(tItem)",
			"{",
			"{IncIndent}",
				"$(this).val(\"\");",
				"itemName = $(this).attr(\"id\").substr(10);",
				"externalFilters[[itemName]] = \"\";",
				"{DecIndent}",
			"});",
			"{DecIndent}",
		"}",
		"// In this context, search is used to reload the data to the UI.",
		"$grid.jsGrid(\"search\");",
		"{DecIndent}",
	"});",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Expanding Sections                                                        */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"$(\".tabAccordian\").accordion(",
	"{IncIndent}",
		"{ collapsible: true, active: false, heightStyle: \"content\" }",
		"{DecIndent}",
	");",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"/*---------------------------------------------------------------------------*/",
"/* Tab Pages                                                                 */",
"/*---------------------------------------------------------------------------*/",
"{IncIndent}",
	"$(\"#tabs\").tabs({",
	"{IncIndent}",
		"activate: function(event, ui)",
		"{",
		"{IncIndent}",
			"switch(ui.newPanel.attr('id'))",
			"{",
			"{IncIndent}",
				"{LoopStart(name:tabPageActivateR;level:component;expression:{Lower({ObjectName})}=account)}",
				"case \"{Plural({ObjectName})}\":",
				"{IncIndent}",
					"// Reload all tables.",
					"console.log(\"Tab Selected: {Plural({ObjectName})}...\");",
					"{LoopStart(name:tabPageActivateRItem;level:entry;expression:{Instr([GridItemEditor],select)}>0)}",
					"$(\"#grd{Plural({ObjectName})}\").jsGrid(\"fieldOption\", \"[Name]\",",
					"{IncIndent}",
						"\"items\", [GridItemsSource]);",
						"{DecIndent}",
					"{LoopEnd(name:tabPageActivateRItem)}",
					"$(\"#grd{Plural({ObjectName})}\").jsGrid(\"refresh\");",
					"break;",
					"{DecIndent}",
				"{LoopEnd(name:tabPageActivateR)}",
				"{LoopStart(name:tabPageRefresh;level:component;expression:{Lower({ObjectName})}<>account)}",
				"case \"{Plural({ObjectName})}\":",
				"{IncIndent}",
					"// Refresh display.",
					"console.log(\"Tab Selected: {Plural({ObjectName})}...\");",
					"$(\"#grd{Plural({ObjectName})}\").jsGrid(\"refresh\");",
					"break;",
					"{DecIndent}",
				"{LoopEnd(name:tabPageRefresh)}",
				"{DecIndent}",
			"}",
			"{DecIndent}",
		"}",
		"{DecIndent}",
	"});",
	"{DecIndent}",
"/*---------------------------------------------------------------------------*/",
"",
"{LoopStart(name:view;level:component)}",
"/*---------------------------------------------------------------------------*/",
"/* {Plural({ObjectName})} View {SpaceTo(77)}*/",
"/*---------------------------------------------------------------------------*/",
"$(\"#grd{Plural({ObjectName})}\").jsGrid(",
"{",
"{IncIndent}",
	"{ConditionStart(name:viewIncludeHeight;expression:{Lower({ObjectName})}<>customer)}",
	"height: \"70vh\",",
	"{ConditionEnd(name:viewIncludeHeight)}",
	"width: \"100%\",",
	"",
	"filtering: false,",
	"editing: true,",
	"sorting: true,",
	"paging: true,",
	"autoload: true,",
	"",
	"pageSize: 4,",
	"pageButtonCount: 5,",
	"",
	"deleteConfirm: \"Do you really want to delete the {Lower({ObjectName})}?\",",
	"loadMessage: \"Loading...\",",
	"",
	"controller: {Lower({Plural({ObjectName})})}ViewModel,",
	"",
	"fields: [",
	"{IncIndent}",
		"{LoopStart(name:viewField;level:entry;expression:{Length([GridItemEditor])}>0)}",
		"{",
		"{IncIndent}",
			"{ConditionStart(name:viewFieldExpression0;expression:[GridItemEditor]<>expression)}",
			"name: \"[Name]\",",
			"{ConditionEnd(name:viewFieldExpression0)}",
			"{ConditionStart(name:viewFieldExpression1;expression:[GridItemEditor]=expression)}",
			"name: \"[GridExpressionData]\",",
			"{ConditionEnd(name:viewFieldExpression1)}",
			"{ConditionStart(name:viewFieldTitle;expression:{Length([DisplayName])}>0)}",
			"title: \"[DisplayName]\",",
			"{ConditionEnd(name:viewFieldTitle)}",
			"{ConditionStart(name:viewFieldSelect;expression:[GridItemEditor]=select)}",
			"items: [GridItemsSource],",
			"valueField: \"[GridItemsValueField]\",",
			"textField: \"[GridItemsTextField]\",",
			"{ConditionEnd(name:viewFieldSelect)}",
			"{ConditionStart(name:viewFieldExpression;expression:[GridItemEditor]=expression)}",
			"expression: \"[GridItemsExpression]\",",
			"{ConditionEnd(name:viewFieldExpression)}",
			"{ConditionStart(name:viewFieldSelectExp;expression:[GridItemEditor]=selectexpression)}",
			"items: [GridItemsSource],",
			"valueField: \"[GridItemsValueField]\",",
			"expression: \"[GridItemsExpression]\",",
			"{ConditionEnd(name:viewFieldSelectExp)}",
			"{ConditionStart(name:viewFieldEditing;expression:{Length([GridEditing])}>0)}",
			"editing: \"[GridEditing]\",",
			"{ConditionEnd(name:viewFieldEditing)}",
			"{ConditionStart(name:viewFieldWidth;expression:{Length([GridWidth])}>0)}",
			"width: [GridWidth],",
			"{ConditionEnd(name:viewFieldWidth)}",
			"type: \"[GridItemEditor]\"",
			"{DecIndent}",
		"},",
		"{LoopEnd(name:viewField)}",
		"{ type: \"control\" }",
		"{DecIndent}",
	"]",
	"{DecIndent}",
"});",
"/*---------------------------------------------------------------------------*/",
"{LoopEnd(name:view)}",
"",
"/*---------------------------------------------------------------------------*/",
"/* Get Server Data                                                           */",
"/*---------------------------------------------------------------------------*/",
"loadData();",
"/*---------------------------------------------------------------------------*/",
"/*****************************************************************************/"
]
